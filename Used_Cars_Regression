{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-14T08:07:29.706588Z","iopub.execute_input":"2024-09-14T08:07:29.707238Z","iopub.status.idle":"2024-09-14T08:07:30.071002Z","shell.execute_reply.started":"2024-09-14T08:07:29.707204Z","shell.execute_reply":"2024-09-14T08:07:30.070052Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport re\nimport polars as pl\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.inspection import permutation_importance\nimport shap\nimport warnings\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.svm import SVR\nimport xgboost as xgb\nimport lightgbm as lgb\n# Ignore all warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:30.072678Z","iopub.execute_input":"2024-09-14T08:07:30.073052Z","iopub.status.idle":"2024-09-14T08:07:47.778488Z","shell.execute_reply.started":"2024-09-14T08:07:30.073019Z","shell.execute_reply":"2024-09-14T08:07:47.777479Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"%%writefile data_preprocessing.py\n\nimport os\nimport re\nimport polars as pl\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nimport numpy as np\nimport warnings\n\n# Ignore all warnings\nwarnings.filterwarnings('ignore')\n\nclass DataPreprocessor:\n    def __init__(self, train_file, test_file=None, rare_threshold=40, additional_categorical=None):\n        \"\"\"\n        Initialize the DataPreprocessor.\n\n        Parameters:\n        - train_file (str): Path to the training CSV file.\n        - test_file (str, optional): Path to the testing CSV file.\n        - rare_threshold (int): Threshold below which categories are considered rare.\n        - additional_categorical (list, optional): List of additional categorical column names.\n        \"\"\"\n        self.train_file = train_file\n        self.test_file = test_file\n        self.train = None\n        self.test = None\n        self.label_encoders = {}\n        self.scaler = StandardScaler()\n        self.rare_threshold = rare_threshold\n        self.CAT_SIZE = []\n        self.CAT_EMB = []\n        self.RARE = []\n        self.CATS = []  # List of categorical columns to encode\n        self.NUMS = []  # List of numerical columns to scale\n        self.additional_categorical = additional_categorical if additional_categorical else []\n\n    def load_data(self):\n        self.train = pl.read_csv(self.train_file)\n        if self.test_file:\n            self.test = pl.read_csv(self.test_file)\n            print(\"Training and Testing data loaded successfully.\")\n        else:\n            print(\"Training data loaded successfully.\")\n    \n    def replace_null_values(self):\n        # Replace specific null representations with \"Unknown\"\n        for column in [\"fuel_type\", \"clean_title\", \"accident\", \"transmission\"]:\n            if column in self.train.columns:\n                unique_values = self.train.unique(subset=[column], maintain_order=True)[column]\n                pl_null = unique_values[2] if len(unique_values) > 2 else None  # Adjust index as needed\n                mapping = {'–': pl_null, \"not supported\": pl_null, pl_null: \"Unknown\"}\n                self.train = self.train.with_columns(pl.col(column).replace(mapping))\n                if self.test and column in self.test.columns:\n                    self.test = self.test.with_columns(pl.col(column).replace(mapping))\n                self.train = self.train.with_columns(pl.col(column).replace(pl_null, \"Unknown\"))\n                if self.test and column in self.test.columns:\n                    self.test = self.test.with_columns(pl.col(column).replace(pl_null, \"Unknown\"))\n        print(\"Null values replaced.\")\n\n    def categorize_transmission(self, trans):\n        if trans is None or pd.isnull(trans):\n            return \"Other\"\n        trans = trans.lower()\n        if \"manual\" in trans or \"m/t\" in trans:\n            return \"Manual\"\n        elif \"automatic\" in trans or \"a/t\" in trans or \"cvt\" in trans:\n            return \"Automatic\"\n        else:\n            return \"Other\"\n\n    def extract_speed(self, trans):\n        if trans is None or pd.isnull(trans):\n            return \"Other\"\n        match = re.search(r\"(\\d+)-speed\", trans, re.IGNORECASE)\n        if match:\n            return match.group(1)\n        else:\n            return \"Other\"\n\n    def categorize_transmissions(self):\n        # Apply categorization on training data\n        df_pandas = self.train.to_pandas()\n        df_pandas[\"transmission_category\"] = df_pandas[\"transmission\"].apply(self.categorize_transmission)\n        df_pandas[\"speed_category\"] = df_pandas[\"transmission\"].apply(self.extract_speed)\n        self.train = pl.from_pandas(df_pandas)\n\n        # Apply the same to testing data if available\n        if self.test:\n            df_test = self.test.to_pandas()\n            df_test[\"transmission_category\"] = df_test[\"transmission\"].apply(self.categorize_transmission)\n            df_test[\"speed_category\"] = df_test[\"transmission\"].apply(self.extract_speed)\n            self.test = pl.from_pandas(df_test)\n        print(\"Transmissions categorized.\")\n\n    def extract_engine_details(self, engine_str):\n        if pd.isnull(engine_str):\n            return 0.0, 0.0, 0\n        hp_match = re.search(r\"(\\d{2,3}\\.?\\d*)HP\", engine_str)\n        l_match = re.search(r\"(\\d\\.?\\d*)L\", engine_str)\n        cyl_match = re.search(r\"(\\d+) Cylinder\", engine_str)\n        hp = float(hp_match.group(1)) if hp_match else 0.0\n        liters = float(l_match.group(1)) if l_match else 0.0\n        cylinders = int(cyl_match.group(1)) if cyl_match else 0\n        return hp, liters, cylinders\n\n    def apply_engine_extraction(self):\n        # Apply extraction on training data\n        df_pandas = self.train.to_pandas()\n        engine_details = df_pandas['engine'].apply(self.extract_engine_details)\n        df_pandas['HP'], df_pandas['Liters'], df_pandas['Cylinders'] = zip(*engine_details)\n        self.train = pl.from_pandas(df_pandas)\n        self.train = self.train.drop([\"transmission\", \"engine\"])\n        \n        # Apply the same to testing data if available\n        if self.test:\n            df_test = self.test.to_pandas()\n            engine_details_test = df_test['engine'].apply(self.extract_engine_details)\n            df_test['HP'], df_test['Liters'], df_test['Cylinders'] = zip(*engine_details_test)\n            self.test = pl.from_pandas(df_test)\n            self.test = self.test.drop([\"transmission\", \"engine\"])\n        print(\"Engine details extracted.\")\n\n    def detect_categorical_columns(self):\n        \"\"\"\n        Automatically detect categorical columns based on data types and additional specifications.\n        \"\"\"\n        df_pandas = self.train.to_pandas()\n        # Detect categorical columns based on data types\n        categorical_columns = df_pandas.select_dtypes(include=['object', 'category', 'bool', 'string']).columns.tolist()\n        \n        # Include additional categorical columns provided by the user\n        for col in self.additional_categorical:\n            if col in df_pandas.columns and col not in categorical_columns:\n                categorical_columns.append(col)\n        \n        print(f\"Detected categorical columns: {categorical_columns}\")\n        return categorical_columns\n\n    def label_encode_and_handle_rare(self, cat_cols):\n        \"\"\"\n        Label encode categorical columns and handle rare categories.\n        Rare categories are replaced with 0.\n        \"\"\"\n        df_pandas = self.train.to_pandas()\n        if self.test:\n            df_test = self.test.to_pandas()\n        else:\n            df_test = None\n\n        for c in cat_cols:\n            print(f\"\\nProcessing categorical column: {c}\")\n            # Ensure the column is of a categorical type\n            if df_pandas[c].dtype not in ['object', 'category', 'bool', 'string', 'int64']:\n                print(f\"Skipping column {c} as it is not of a categorical type.\")\n                continue\n            # Factorize to get integer codes\n            df_pandas[c], uniques = pd.factorize(df_pandas[c], sort=True)\n            if df_test is not None:\n                # Apply the same factorization to test data\n                df_test[c] = pd.Categorical(df_test[c], categories=uniques).codes\n                df_test[c] = df_test[c].astype(int)\n            # Shift to ensure minimum label is 0\n            df_pandas[c] -= df_pandas[c].min()\n            if df_test is not None:\n                df_test[c] -= df_pandas[c].min()\n            # Get value counts\n            vc = df_pandas[c].value_counts()\n            # Identify rare categories\n            rare_categories = vc[vc < self.rare_threshold].index.values\n            self.RARE.append(rare_categories)\n            # Number of unique categories excluding rare\n            n_unique = df_pandas[c].nunique()\n            min_val = df_pandas[c].min()\n            max_val = df_pandas[c].max()\n            rare_count = len(rare_categories)\n            print(f'{c}: nunique={n_unique}, min={min_val}, max={max_val}, rare_ct={rare_count}')\n            # Update CAT_SIZE and CAT_EMB\n            # +1 for rare category\n            cat_size = max_val + 2  # Adding one more for rare\n            self.CAT_SIZE.append(cat_size)\n            self.CAT_EMB.append(int(np.ceil(np.sqrt(cat_size))))\n            # Increment labels by 1 to reserve 0 for rare\n            df_pandas[c] += 1\n            if df_test is not None:\n                df_test[c] += 1\n            # Replace rare categories with 0\n            rare_indices = rare_categories + 1  # Since labels have been incremented\n            df_pandas.loc[df_pandas[c].isin(rare_indices), c] = 0\n            if df_test is not None:\n                df_test.loc[df_test[c].isin(rare_indices), c] = 0\n            # Store LabelEncoder (if needed elsewhere)\n            le = LabelEncoder()\n            # Fit on non-rare categories\n            non_rare = df_pandas[df_pandas[c] != 0][c]\n            le.fit(non_rare)\n            self.label_encoders[c] = le\n            print(f\"Label encoding completed for column: {c}\")\n        \n        # Update the training and testing data\n        self.train = pl.from_pandas(df_pandas)\n        if self.test:\n            self.test = pl.from_pandas(df_test)\n        print(\"\\nLabel encoding and rare category handling complete.\")\n\n    def fill_nulls(self):\n        df_pandas = self.train.to_pandas()\n        numerical_cols = ['speed_category', 'HP', 'Liters', 'Cylinders']\n        for col in numerical_cols:\n            if col in df_pandas.columns:\n                df_pandas[col].fillna(0, inplace=True)\n                if self.test and col in self.test.columns:\n                    df_test = self.test.to_pandas()\n                    df_test[col].fillna(0, inplace=True)\n                    self.test = pl.from_pandas(df_test)\n        self.train = pl.from_pandas(df_pandas)\n        print(\"Null values filled.\")\n\n    def drop_columns(self, columns):\n        existing_columns_train = self.train.columns\n        columns_to_drop = [col for col in columns if col in existing_columns_train]\n        self.train = self.train.drop(columns_to_drop)\n        if self.test:\n            existing_columns_test = self.test.columns\n            columns_to_drop_test = [col for col in columns if col in existing_columns_test]\n            self.test = self.test.drop(columns_to_drop_test)\n        print(f\"Dropped columns: {columns_to_drop}\")\n\n    def detect_numerical_columns(self):\n        \"\"\"\n        Detect numerical columns that need to be scaled.\n        \"\"\"\n        df_pandas = self.train.to_pandas()\n        numerical_columns = df_pandas.select_dtypes(include=['float64', 'int64']).columns.tolist()\n        # Exclude categorical columns\n        numerical_columns = [col for col in numerical_columns if col not in self.CATS]\n        # Further exclude target variable if present\n        if 'price' in numerical_columns:\n            numerical_columns.remove('price')\n        self.NUMS = numerical_columns\n        print(f\"Detected numerical columns for scaling: {self.NUMS}\")\n        return self.NUMS\n\n    def scale_features(self):\n        df_pandas = self.train.to_pandas()\n        numerical_columns = self.NUMS\n        print(f\"Scaling numerical columns: {numerical_columns}\")\n        # Fit scaler on training data\n        df_pandas[numerical_columns] = self.scaler.fit_transform(df_pandas[numerical_columns])\n        self.train = pl.from_pandas(df_pandas)\n        \n        # Apply scaler to test data if available\n        if self.test:\n            df_test = self.test.to_pandas()\n            df_test[numerical_columns] = self.scaler.transform(df_test[numerical_columns])\n            self.test = pl.from_pandas(df_test)\n        print(\"Features scaled.\")\n\n    def preprocess(self):\n        self.load_data()\n        self.replace_null_values()\n        self.categorize_transmissions()\n        self.apply_engine_extraction()\n        # Automatically detect categorical columns\n        categorical_columns = self.detect_categorical_columns()\n        self.CATS = categorical_columns\n        self.label_encode_and_handle_rare(cat_cols=categorical_columns)\n        self.fill_nulls()\n        self.drop_columns([\"id\"])  # Ensure 'id' exists or handle if missing\n        self.detect_numerical_columns()\n        self.scale_features()\n        print(\"Preprocessing complete.\")\n\n    def get_embedding_info(self):\n        \"\"\"\n        Returns a dictionary with categorical columns as keys and a tuple of (CAT_SIZE, CAT_EMB)\n        \"\"\"\n        embedding_info = {}\n        for idx, c in enumerate(self.CATS):\n            embedding_info[c] = (self.CAT_SIZE[idx], self.CAT_EMB[idx])\n        return embedding_info\n\n    def print_dataframe(self, dataset='train'):\n        # Display the dataframe\n        if dataset == 'train':\n            return self.train\n        elif dataset == 'test' and self.test is not None:\n            return self.test\n        else:\n            print(f\"No dataset named '{dataset}' found.\")\n            return None\n\n# Example usage:\n# preprocessor = DataPreprocessor(\n#     train_file='train.csv',\n#     test_file='test.csv',\n#     rare_threshold=40,\n#     additional_categorical=['brand', 'model']  # Specify additional categorical columns here\n# )\n# preprocessor.preprocess()\n# processed_train = preprocessor.print_dataframe('train')\n# processed_test = preprocessor.print_dataframe('test')\n# embedding_info = preprocessor.get_embedding_info()\n# print(embedding_info)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.780107Z","iopub.execute_input":"2024-09-14T08:07:47.780714Z","iopub.status.idle":"2024-09-14T08:07:47.796034Z","shell.execute_reply.started":"2024-09-14T08:07:47.780679Z","shell.execute_reply":"2024-09-14T08:07:47.795023Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Overwriting data_preprocessing.py\n","output_type":"stream"}]},{"cell_type":"code","source":"%%writefile plots.py\n\n\nimport os\nimport re\nimport polars as pl\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.inspection import permutation_importance\nimport shap\nimport warnings\n\n# Ignore all warnings\nwarnings.filterwarnings('ignore')\n\n\nclass Plotter:\n    def __init__(self, X, y):\n        \"\"\"\n        Initializes the Plotter with preprocessed and scaled features and target data.\n        \n        Parameters:\n        - X: Feature DataFrame (already scaled)\n        - y: Target Series (already scaled)\n        \"\"\"\n        self.X = X\n        self.y = y\n\n\n    def plot_correlation_matrix(self):\n        \"\"\"\n        Plots the correlation matrix of the combined feature and target data.\n        \"\"\"\n        # Combine X and y into one DataFrame\n        df_combined = pd.concat([self.X, self.y], axis=1)\n\n        # Calculate the correlation matrix\n        corr_matrix = df_combined.corr()\n\n        # Plot the correlation matrix using a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, xticklabels=corr_matrix.columns, yticklabels=corr_matrix.columns)\n        plt.title(\"Correlation Matrix\", fontsize=16)\n        plt.xticks(rotation=45, ha='right')  # Rotate the x-axis labels slightly for better readability\n        plt.yticks(rotation=0)  # Keep y-axis labels horizontal\n        plt.tight_layout()\n        plt.show()\n        \n    \n    def plot_feature_importance(self, model):\n        \"\"\"\n        Plots feature importance using the provided trained model.\n        \n        Parameters:\n        - model: A trained model (e.g., RandomForestRegressor) with a `feature_importances_` attribute.\n        \"\"\"\n        feature_importances = model.feature_importances_\n        importance_df = pd.DataFrame({\n            'Feature': self.X.columns,\n            'Importance': feature_importances\n        }).sort_values(by='Importance', ascending=False)\n\n        # Plot Feature Importance\n        plt.figure(figsize=(10, 6))\n        sns.barplot(x='Importance', y='Feature', data=importance_df, palette='coolwarm')\n        plt.title(\"Feature Importance\", fontsize=16)\n        plt.tight_layout()\n        plt.show()\n    \n    def plot_permutation_importance(self, model, random_state=42, n_estimators=100, n_repeats=10):\n        \"\"\"\n        Plots permutation feature importance based on the preprocessed data (already scaled).\n        \n        Parameters:\n        - random_state: Random seed for reproducibility (default 42)\n        - n_estimators: Number of trees in the RandomForestRegressor (default 100)\n        - n_repeats: Number of times to shuffle the data during permutation importance (default 10)\n        \"\"\"\n\n        perm_importance = permutation_importance(model, self.X, self.y, n_repeats=n_repeats, random_state=random_state, scoring='neg_root_mean_squared_error')\n\n        # Step 3: Create a DataFrame to store the results\n        perm_importance_df = pd.DataFrame({\n            'Feature': self.X.columns,  # Use X's original column names\n            'Importance': perm_importance.importances_mean\n        }).sort_values(by='Importance', ascending=False)\n\n        # Step 4: Plot Permutation Feature Importance\n        plt.figure(figsize=(10, 6))\n        sns.barplot(x='Importance', y='Feature', data=perm_importance_df, palette='coolwarm')\n        plt.title(\"Permutation Feature Importance (Scaled)\", fontsize=16)\n        plt.tight_layout()\n        plt.show()\n        \n        \n    def plot_shap_summary(self, model):\n        \"\"\"\n        Plots a SHAP summary plot for the provided model.\n        \n        Parameters:\n        - model: A trained model (e.g., RandomForestRegressor)\n        \"\"\"\n        # Create SHAP explainer\n        explainer = shap.TreeExplainer(model)\n\n        # Calculate SHAP values for the feature set\n        shap_values = explainer.shap_values(self.X)\n\n        # Plot SHAP summary plot (global interpretation)\n        shap.summary_plot(shap_values, self.X, feature_names=self.X.columns)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.798833Z","iopub.execute_input":"2024-09-14T08:07:47.799243Z","iopub.status.idle":"2024-09-14T08:07:47.823547Z","shell.execute_reply.started":"2024-09-14T08:07:47.799200Z","shell.execute_reply":"2024-09-14T08:07:47.822518Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Overwriting plots.py\n","output_type":"stream"}]},{"cell_type":"code","source":"import data_preprocessing\nimport plots\nimport importlib\nimportlib.reload(data_preprocessing)\nimportlib.reload(plots)\nfrom data_preprocessing import DataPreprocessor\nfrom plots import Plotter","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.824525Z","iopub.execute_input":"2024-09-14T08:07:47.824797Z","iopub.status.idle":"2024-09-14T08:07:47.845810Z","shell.execute_reply.started":"2024-09-14T08:07:47.824767Z","shell.execute_reply":"2024-09-14T08:07:47.844953Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"DATAPATH = \"/kaggle/input/playground-series-s4e9/\"\nTRAIN_SET = DATAPATH + \"train.csv\"\nTEST_SET = DATAPATH + \"test.csv\"","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.846832Z","iopub.execute_input":"2024-09-14T08:07:47.847177Z","iopub.status.idle":"2024-09-14T08:07:47.853626Z","shell.execute_reply.started":"2024-09-14T08:07:47.847144Z","shell.execute_reply":"2024-09-14T08:07:47.852673Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# data = pl.read_csv(TRAIN_SET)\n# y = data[\"price\"]","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.854812Z","iopub.execute_input":"2024-09-14T08:07:47.855381Z","iopub.status.idle":"2024-09-14T08:07:47.865403Z","shell.execute_reply.started":"2024-09-14T08:07:47.855339Z","shell.execute_reply":"2024-09-14T08:07:47.864523Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# # Example usage\n# preprocessor = DataPreprocessor(TRAIN_SET)\n# preprocessor.preprocess()\n# X = preprocessor.train.drop(\"price\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.866411Z","iopub.execute_input":"2024-09-14T08:07:47.866684Z","iopub.status.idle":"2024-09-14T08:07:47.886947Z","shell.execute_reply.started":"2024-09-14T08:07:47.866655Z","shell.execute_reply":"2024-09-14T08:07:47.886064Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# preprocessor.print_dataframe()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.888155Z","iopub.execute_input":"2024-09-14T08:07:47.888697Z","iopub.status.idle":"2024-09-14T08:07:47.898332Z","shell.execute_reply.started":"2024-09-14T08:07:47.888649Z","shell.execute_reply":"2024-09-14T08:07:47.897593Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# from sklearn.model_selection import KFold\n# import tensorflow as tf\n# from tensorflow.keras.models import Model\n# from tensorflow.keras.layers import Dense, Dropout, Input, Embedding\n# from tensorflow.keras.layers import Concatenate, Multiply\n# import tensorflow.keras.backend as K\n\n# print('TF Version',tf.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.902699Z","iopub.execute_input":"2024-09-14T08:07:47.903264Z","iopub.status.idle":"2024-09-14T08:07:47.909750Z","shell.execute_reply.started":"2024-09-14T08:07:47.903231Z","shell.execute_reply":"2024-09-14T08:07:47.909019Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# EPOCHS = 3\n# LRS = [0.001]*2 + [0.0001]*1\n\n# def lrfn(epoch):\n#     return LRS[epoch]\n\n# rng = [i for i in range(EPOCHS)]\n# lr_y = [lrfn(x) for x in rng]\n# plt.figure(figsize=(10, 4))\n# plt.plot(rng, lr_y, '-o')\n# print(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\". \\\n#         format(lr_y[0], max(lr_y), lr_y[-1]))\n# plt.xlabel(\"Epoch\")\n# plt.ylabel(\"Learning Rate\")\n# plt.title(\"Learning Rate Schedule\")\n# plt.show()\n\n# lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose = True)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.910757Z","iopub.execute_input":"2024-09-14T08:07:47.911029Z","iopub.status.idle":"2024-09-14T08:07:47.922622Z","shell.execute_reply.started":"2024-09-14T08:07:47.910999Z","shell.execute_reply":"2024-09-14T08:07:47.921719Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Input, Embedding, Flatten, Concatenate\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import the DataPreprocessor class\nfrom data_preprocessing import DataPreprocessor\n\n# Define your version number for OOF predictions\nVER = 1\n\n# Initialize Preprocessor\npreprocessor = DataPreprocessor(\n    train_file=TRAIN_SET,  # Replace with your actual training file path\n#     test_file='test.csv',    # Replace with your actual testing file path\n    rare_threshold=40,\n    additional_categorical=['brand', 'model']  # Specify additional categorical columns here\n)\npreprocessor.preprocess()\n\n# Retrieve processed data\nprocessed_train = preprocessor.print_dataframe('train').to_pandas()\n# processed_test = preprocessor.print_dataframe('test').to_pandas()\nembedding_info = preprocessor.get_embedding_info()\nprint(\"Embedding Info:\", embedding_info)\n\n# Define categorical and numerical columns\nCATS = preprocessor.CATS\nNUMS = preprocessor.NUMS\n\n# Define target\nTARGET = 'price'\n\n# Split the data into training and validation sets (80:20)\nX = processed_train.drop(columns=[TARGET])\ny = processed_train[TARGET].values\n\nX_train_cats, X_valid_cats, X_train_nums, X_valid_nums, y_train, y_valid = train_test_split(\n    X[CATS].values,\n    X[NUMS].values,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\n# Learning Rate Schedule\nEPOCHS = 15\nLRS = [0.001] * 2 + [0.0001] * 1\n\ndef lrfn(epoch):\n    return LRS[epoch] if epoch < len(LRS) else LRS[-1]\n\n# Plot Learning Rate Schedule\nrng = list(range(EPOCHS))\nlr_y = [lrfn(x) for x in rng]\nplt.figure(figsize=(10, 4))\nplt.plot(rng, lr_y, '-o')\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(lr_y[0], max(lr_y), lr_y[-1]))\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Learning Rate\")\nplt.title(\"Learning Rate Schedule\")\nplt.show()\n\nlr_callback = LearningRateScheduler(lrfn, verbose=True)\n\n# Build Keras Model\ndef build_model(embedding_info, numerical_input_size):\n    # CATEGORICAL FEATURES\n    x_input_cats = Input(shape=(len(CATS),), name='categorical_input')\n    embs = []\n    for j, cat in enumerate(CATS):\n        num_categories, embed_dim = embedding_info[cat]\n        e = Embedding(input_dim=num_categories, output_dim=embed_dim, name=f'embedding_{cat}')\n        x = e(x_input_cats[:, j])\n        x = Flatten()(x)\n        embs.append(x)\n    \n    # NUMERICAL FEATURES\n    x_input_nums = Input(shape=(numerical_input_size,), name='numerical_input')\n    \n    # COMBINE\n    x = Concatenate(axis=-1)(embs + [x_input_nums]) \n    x = Dense(256, activation='relu')(x)\n    x = Dense(256, activation='relu')(x)\n    x = Dense(256, activation='relu')(x)\n    output = Dense(1, activation='linear')(x)\n    \n    model = Model(inputs=[x_input_cats, x_input_nums], outputs=output)\n    \n    return model\n\n# Initialize Model\nmodel = build_model(embedding_info, numerical_input_size=len(NUMS))\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=lrfn(0)), \n    loss=\"mean_squared_error\", \n    metrics=[tf.keras.metrics.RootMeanSquaredError()]\n)\n\n# Display Model Summary\nmodel.summary()\n\n# Train the Model\nhistory = model.fit(\n    [X_train_cats, X_train_nums], y_train, \n    validation_data=([X_valid_cats, X_valid_nums], y_valid),\n    callbacks=[lr_callback],\n    batch_size=64, epochs=EPOCHS, verbose=2\n)\n\n# Plot Training and Validation RMSE\nplt.figure(figsize=(10, 6))\nplt.plot(history.history['root_mean_squared_error'], label='Train RMSE')\nplt.plot(history.history['val_root_mean_squared_error'], label='Validation RMSE')\nplt.xlabel('Epoch')\nplt.ylabel('RMSE')\nplt.title('Training and Validation RMSE')\nplt.legend()\nplt.show()\n\n# Predict on Validation Set\noof_preds = model.predict([X_valid_cats, X_valid_nums], batch_size=512).flatten()\n\n# Compute RMSE for Validation Set\nrmse = np.sqrt(np.mean((oof_preds - y_valid) ** 2))\nprint('Validation RMSE =', rmse)\n\n# Compute Overall CV RMSE (Here it's just the validation RMSE since we're not using K-Fold)\nrsme = rmse\nprint(\"Overall CV RMSE =\", rsme)\n\n# Save OOF Predictions\nif 'id' in processed_train.columns:\n    oof_df = processed_train.loc[X_valid_cats[:,0].astype(int), ['id']].copy()  # Adjust indexing as needed\n    oof_df[\"pred\"] = oof_preds\n    oof_df.to_csv(f\"oof_v{VER}.csv\", index=False)\nelse:\n    oof_df = pd.DataFrame({'pred': oof_preds})\n    oof_df.to_csv(f\"oof_v{VER}.csv\", index=False)\n    print(\"Warning: 'id' column not found. OOF predictions saved without 'id'.\")\n\n# # Predict on Test Set\n# X_test_cats = processed_test[CATS].values\n# X_test_nums = processed_test[NUMS].values\n# test_preds = model.predict([X_test_cats, X_test_nums], batch_size=512).flatten()\n\n# # Save Test Predictions\n# processed_test['preds'] = test_preds\n# processed_test.to_csv('test_with_preds.csv', index=False)\n# print(\"Test predictions saved to 'test_with_preds.csv'\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:07:47.923916Z","iopub.execute_input":"2024-09-14T08:07:47.924218Z","iopub.status.idle":"2024-09-14T08:09:48.868842Z","shell.execute_reply.started":"2024-09-14T08:07:47.924187Z","shell.execute_reply":"2024-09-14T08:09:48.867508Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Training data loaded successfully.\nNull values replaced.\nTransmissions categorized.\nEngine details extracted.\nDetected categorical columns: ['brand', 'model', 'fuel_type', 'ext_col', 'int_col', 'accident', 'clean_title', 'transmission_category', 'speed_category']\n\nProcessing categorical column: brand\nbrand: nunique=57, min=0, max=56, rare_ct=8\nLabel encoding completed for column: brand\n\nProcessing categorical column: model\nmodel: nunique=1897, min=0, max=1896, rare_ct=909\nLabel encoding completed for column: model\n\nProcessing categorical column: fuel_type\nfuel_type: nunique=6, min=0, max=5, rare_ct=0\nLabel encoding completed for column: fuel_type\n\nProcessing categorical column: ext_col\next_col: nunique=319, min=0, max=318, rare_ct=176\nLabel encoding completed for column: ext_col\n\nProcessing categorical column: int_col\nint_col: nunique=156, min=0, max=155, rare_ct=86\nLabel encoding completed for column: int_col\n\nProcessing categorical column: accident\naccident: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: accident\n\nProcessing categorical column: clean_title\nclean_title: nunique=2, min=0, max=1, rare_ct=0\nLabel encoding completed for column: clean_title\n\nProcessing categorical column: transmission_category\ntransmission_category: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: transmission_category\n\nProcessing categorical column: speed_category\nspeed_category: nunique=10, min=0, max=9, rare_ct=0\nLabel encoding completed for column: speed_category\n\nLabel encoding and rare category handling complete.\nNull values filled.\nDropped columns: ['id']\nDetected numerical columns for scaling: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nScaling numerical columns: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nFeatures scaled.\nPreprocessing complete.\nEmbedding Info: {'brand': (58, 8), 'model': (1898, 44), 'fuel_type': (7, 3), 'ext_col': (320, 18), 'int_col': (157, 13), 'accident': (4, 2), 'clean_title': (3, 2), 'transmission_category': (4, 2), 'speed_category': (11, 4)}\nLearning rate schedule: 0.001 to 0.001 to 0.0001\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ categorical_input   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (\u001b[38;5;33mGetItem\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_1          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_2          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_3          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_4          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_5          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_6          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_7          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_8          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_brand     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)         │        \u001b[38;5;34m464\u001b[0m │ get_item[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m44\u001b[0m)        │     \u001b[38;5;34m83,512\u001b[0m │ get_item_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_fuel_type │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │         \u001b[38;5;34m21\u001b[0m │ get_item_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_ext_col   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m)        │      \u001b[38;5;34m5,760\u001b[0m │ get_item_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_int_col   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m)        │      \u001b[38;5;34m2,041\u001b[0m │ get_item_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_accident  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m8\u001b[0m │ get_item_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_clean_ti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m6\u001b[0m │ get_item_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_transmis… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m8\u001b[0m │ get_item_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_speed_ca… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │         \u001b[38;5;34m44\u001b[0m │ get_item_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_brand[\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m44\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_fuel_t… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_3 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ embedding_ext_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_4 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ embedding_int_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_5 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_accide… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_6 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_clean_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_7 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_transm… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_8 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_speed_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ numerical_input     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m101\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ flatten[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],    │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ flatten_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ numerical_input[\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │     \u001b[38;5;34m26,112\u001b[0m │ concatenate[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │     \u001b[38;5;34m65,792\u001b[0m │ dense[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │     \u001b[38;5;34m65,792\u001b[0m │ dense_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │        \u001b[38;5;34m257\u001b[0m │ dense_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ categorical_input   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_1          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_2          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_3          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_4          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_5          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_6          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_7          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_8          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_brand     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">464</span> │ get_item[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">44</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">83,512</span> │ get_item_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_fuel_type │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">21</span> │ get_item_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_ext_col   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">5,760</span> │ get_item_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_int_col   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">2,041</span> │ get_item_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_accident  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │ get_item_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_clean_ti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span> │ get_item_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_transmis… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │ get_item_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_speed_ca… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">44</span> │ get_item_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_brand[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">44</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_fuel_t… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_ext_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_int_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_accide… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_clean_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_transm… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_speed_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ numerical_input     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">101</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ flatten[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],    │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ flatten_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ numerical_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">26,112</span> │ concatenate[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">65,792</span> │ dense[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">65,792</span> │ dense_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">257</span> │ dense_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m249,817\u001b[0m (975.85 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">249,817</span> (975.85 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m249,817\u001b[0m (975.85 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">249,817</span> (975.85 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nEpoch 1: LearningRateScheduler setting learning rate to 0.001.\nEpoch 1/15\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1726301296.289439     126 service.cc:145] XLA service 0x799158005a80 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1726301296.289493     126 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1726301296.289500     126 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\nI0000 00:00:1726301299.025931     126 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"2357/2357 - 13s - 6ms/step - loss: 5679529984.0000 - root_mean_squared_error: 75362.6562 - val_loss: 4662339584.0000 - val_root_mean_squared_error: 68281.3281 - learning_rate: 0.0010\n\nEpoch 2: LearningRateScheduler setting learning rate to 0.001.\nEpoch 2/15\n2357/2357 - 6s - 2ms/step - loss: 5477640704.0000 - root_mean_squared_error: 74011.0859 - val_loss: 4641579520.0000 - val_root_mean_squared_error: 68129.1328 - learning_rate: 0.0010\n\nEpoch 3: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 3/15\n2357/2357 - 5s - 2ms/step - loss: 5426253312.0000 - root_mean_squared_error: 73663.1094 - val_loss: 4633183232.0000 - val_root_mean_squared_error: 68067.4922 - learning_rate: 1.0000e-04\n\nEpoch 4: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 4/15\n2357/2357 - 5s - 2ms/step - loss: 5420398592.0000 - root_mean_squared_error: 73623.3594 - val_loss: 4630295040.0000 - val_root_mean_squared_error: 68046.2734 - learning_rate: 1.0000e-04\n\nEpoch 5: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 5/15\n2357/2357 - 5s - 2ms/step - loss: 5416133120.0000 - root_mean_squared_error: 73594.3828 - val_loss: 4628276736.0000 - val_root_mean_squared_error: 68031.4375 - learning_rate: 1.0000e-04\n\nEpoch 6: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 6/15\n2357/2357 - 5s - 2ms/step - loss: 5412233216.0000 - root_mean_squared_error: 73567.8828 - val_loss: 4628101632.0000 - val_root_mean_squared_error: 68030.1562 - learning_rate: 1.0000e-04\n\nEpoch 7: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 7/15\n2357/2357 - 5s - 2ms/step - loss: 5408888832.0000 - root_mean_squared_error: 73545.1484 - val_loss: 4627076096.0000 - val_root_mean_squared_error: 68022.6172 - learning_rate: 1.0000e-04\n\nEpoch 8: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 8/15\n2357/2357 - 10s - 4ms/step - loss: 5406080000.0000 - root_mean_squared_error: 73526.0469 - val_loss: 4631996928.0000 - val_root_mean_squared_error: 68058.7734 - learning_rate: 1.0000e-04\n\nEpoch 9: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 9/15\n2357/2357 - 5s - 2ms/step - loss: 5403214336.0000 - root_mean_squared_error: 73506.5625 - val_loss: 4623969280.0000 - val_root_mean_squared_error: 67999.7734 - learning_rate: 1.0000e-04\n\nEpoch 10: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 10/15\n2357/2357 - 5s - 2ms/step - loss: 5399951872.0000 - root_mean_squared_error: 73484.3672 - val_loss: 4623433216.0000 - val_root_mean_squared_error: 67995.8359 - learning_rate: 1.0000e-04\n\nEpoch 11: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 11/15\n2357/2357 - 5s - 2ms/step - loss: 5397239808.0000 - root_mean_squared_error: 73465.9062 - val_loss: 4621487616.0000 - val_root_mean_squared_error: 67981.5234 - learning_rate: 1.0000e-04\n\nEpoch 12: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 12/15\n2357/2357 - 5s - 2ms/step - loss: 5394447360.0000 - root_mean_squared_error: 73446.8984 - val_loss: 4622481408.0000 - val_root_mean_squared_error: 67988.8359 - learning_rate: 1.0000e-04\n\nEpoch 13: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 13/15\n2357/2357 - 5s - 2ms/step - loss: 5391581184.0000 - root_mean_squared_error: 73427.3828 - val_loss: 4621457408.0000 - val_root_mean_squared_error: 67981.3047 - learning_rate: 1.0000e-04\n\nEpoch 14: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 14/15\n2357/2357 - 5s - 2ms/step - loss: 5388671488.0000 - root_mean_squared_error: 73407.5703 - val_loss: 4619385344.0000 - val_root_mean_squared_error: 67966.0625 - learning_rate: 1.0000e-04\n\nEpoch 15: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 15/15\n2357/2357 - 5s - 2ms/step - loss: 5386298368.0000 - root_mean_squared_error: 73391.4062 - val_loss: 4619185152.0000 - val_root_mean_squared_error: 67964.5859 - learning_rate: 1.0000e-04\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step\nValidation RMSE = 67964.59352807094\nOverall CV RMSE = 67964.59352807094\nWarning: 'id' column not found. OOF predictions saved without 'id'.\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[12], line 148\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWarning: \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m column not found. OOF predictions saved without \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    147\u001b[0m \u001b[38;5;66;03m# Predict on Test Set\u001b[39;00m\n\u001b[0;32m--> 148\u001b[0m X_test_cats \u001b[38;5;241m=\u001b[39m \u001b[43mprocessed_test\u001b[49m[CATS]\u001b[38;5;241m.\u001b[39mvalues\n\u001b[1;32m    149\u001b[0m X_test_nums \u001b[38;5;241m=\u001b[39m processed_test[NUMS]\u001b[38;5;241m.\u001b[39mvalues\n\u001b[1;32m    150\u001b[0m test_preds \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict([X_test_cats, X_test_nums], batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m512\u001b[39m)\u001b[38;5;241m.\u001b[39mflatten()\n","\u001b[0;31mNameError\u001b[0m: name 'processed_test' is not defined"],"ename":"NameError","evalue":"name 'processed_test' is not defined","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.869742Z","iopub.status.idle":"2024-09-14T08:09:48.870123Z","shell.execute_reply.started":"2024-09-14T08:09:48.869916Z","shell.execute_reply":"2024-09-14T08:09:48.869933Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Dictionary for RandomForestRegressor parameters\n# rf_params = {\n#     'n_estimators': 100,\n#     'criterion': 'squared_error',\n#     'max_depth': None,\n#     'min_samples_split': 2,\n#     'min_samples_leaf': 1,\n#     'min_weight_fraction_leaf': 0.0,\n#     'max_features': 'auto',\n#     'max_leaf_nodes': None,\n#     'bootstrap': True,\n#     'oob_score': False,\n#     'n_jobs': -1,\n#     'random_state': 42,\n#     'verbose': 0,\n#     'warm_start': False,\n#     'ccp_alpha': 0.0,\n#     'max_samples': None\n# }\n\n\n\n# # Dictionary for SVR parameters\n# svr_params = {\n#     'kernel': 'rbf',\n#     'degree': 3,\n#     'gamma': 'scale',\n#     'coef0': 0.0,\n#     'tol': 1e-3,\n#     'C': 1.0,\n#     'epsilon': 0.1,\n#     'shrinking': True,\n#     'cache_size': 200,\n#     'verbose': False,\n#     'max_iter': -1\n# }\n\n\n# xgb_model = xgb.XGBRegressor(\n#     objective='reg:squarederror',\n#     n_estimators=100,\n#     max_depth=6,\n#     learning_rate=0.1,\n#     subsample=0.8,\n#     colsample_bytree=0.8,\n#     random_state=42,\n#     tree_method='gpu_hist'  # Enable GPU\n# )\n\n# lgb_model = lgb.LGBMRegressor(\n#     boosting_type='gbdt',\n#     num_leaves=31,\n#     learning_rate=0.1,\n#     n_estimators=100,\n#     random_state=42,\n#     device='gpu'  # Enable GPU\n# )\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.871629Z","iopub.status.idle":"2024-09-14T08:09:48.872156Z","shell.execute_reply.started":"2024-09-14T08:09:48.871872Z","shell.execute_reply":"2024-09-14T08:09:48.871898Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# models_dict = {}","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.873472Z","iopub.status.idle":"2024-09-14T08:09:48.873980Z","shell.execute_reply.started":"2024-09-14T08:09:48.873712Z","shell.execute_reply":"2024-09-14T08:09:48.873738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Instantiate the RandomForestRegressor model using the parameters from the dictionary\n# rf_model = RandomForestRegressor(**rf_params)\n# rf_model.fit(X_train, y_train)\n# rf_predictions = rf_model.predict(X_test)\n# rf_mse = np.sqrt(mean_squared_error(y_test, rf_predictions))\n# models_dict[rf_mse] = rf_model\n# print(f\"RandomForest RMSE: {rf_mse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.876025Z","iopub.status.idle":"2024-09-14T08:09:48.876437Z","shell.execute_reply.started":"2024-09-14T08:09:48.876246Z","shell.execute_reply":"2024-09-14T08:09:48.876266Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Instantiate the SVR model using the parameters from the dictionary\n# svr_model = SVR(**svr_params)\n# svr_model.fit(X_train, y_train)\n# svr_predictions = svr_model.predict(X_test)\n# svr_mse = np.sqrt(mean_squared_error(y_test, svr_predictions))\n# models_dict[svr_mse] = svr_model\n# print(f\"SVR RMSE: {svr_mse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.878182Z","iopub.status.idle":"2024-09-14T08:09:48.878602Z","shell.execute_reply.started":"2024-09-14T08:09:48.878368Z","shell.execute_reply":"2024-09-14T08:09:48.878391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# xgb_model.fit(X_train, y_train)\n# xgb_predictions = xgb_model.predict(X_test)\n# xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_predictions))\n# models_dict[xgb_rmse] = xgb_model  # Store the RMSE and model\n# print(f\"XGBoost RMSE: {xgb_rmse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.880200Z","iopub.status.idle":"2024-09-14T08:09:48.880569Z","shell.execute_reply.started":"2024-09-14T08:09:48.880384Z","shell.execute_reply":"2024-09-14T08:09:48.880403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# lgb_model.fit(X_train, y_train)\n# lgb_predictions = lgb_model.predict(X_test)\n# lgb_rmse = np.sqrt(mean_squared_error(y_test, lgb_predictions))\n# models_dict[lgb_rmse] = lgb_model  # Store the RMSE and model\n# print(f\"LightGBM RMSE: {lgb_rmse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.881995Z","iopub.status.idle":"2024-09-14T08:09:48.882379Z","shell.execute_reply.started":"2024-09-14T08:09:48.882200Z","shell.execute_reply":"2024-09-14T08:09:48.882219Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize Preprocessor for Test Data\npreprocessor_test = DataPreprocessor(\n    train_file=TEST_SET,  # Replace with your actual test file path\n    rare_threshold=40,\n    additional_categorical=['brand', 'model']\n)\npreprocessor_test.preprocess()\nprint(\"Test Data Preprocessing complete\")\ntest_data = preprocessor_test.train.to_pandas()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:11:16.919306Z","iopub.execute_input":"2024-09-14T08:11:16.919756Z","iopub.status.idle":"2024-09-14T08:11:20.102149Z","shell.execute_reply.started":"2024-09-14T08:11:16.919714Z","shell.execute_reply":"2024-09-14T08:11:20.101175Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Training data loaded successfully.\nNull values replaced.\nTransmissions categorized.\nEngine details extracted.\nDetected categorical columns: ['brand', 'model', 'fuel_type', 'ext_col', 'int_col', 'accident', 'clean_title', 'transmission_category', 'speed_category']\n\nProcessing categorical column: brand\nbrand: nunique=55, min=0, max=54, rare_ct=9\nLabel encoding completed for column: brand\n\nProcessing categorical column: model\nmodel: nunique=1891, min=0, max=1890, rare_ct=1140\nLabel encoding completed for column: model\n\nProcessing categorical column: fuel_type\nfuel_type: nunique=6, min=0, max=5, rare_ct=0\nLabel encoding completed for column: fuel_type\n\nProcessing categorical column: ext_col\next_col: nunique=317, min=0, max=316, rare_ct=211\nLabel encoding completed for column: ext_col\n\nProcessing categorical column: int_col\nint_col: nunique=156, min=0, max=155, rare_ct=110\nLabel encoding completed for column: int_col\n\nProcessing categorical column: accident\naccident: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: accident\n\nProcessing categorical column: clean_title\nclean_title: nunique=2, min=0, max=1, rare_ct=0\nLabel encoding completed for column: clean_title\n\nProcessing categorical column: transmission_category\ntransmission_category: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: transmission_category\n\nProcessing categorical column: speed_category\nspeed_category: nunique=10, min=0, max=9, rare_ct=0\nLabel encoding completed for column: speed_category\n\nLabel encoding and rare category handling complete.\nNull values filled.\nDropped columns: ['id']\nDetected numerical columns for scaling: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nScaling numerical columns: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nFeatures scaled.\nPreprocessing complete.\nTest Data Preprocessing complete\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport polars as pl\nimport numpy as np\n\ndef create_submission(test_set, model, CATS, NUMS, TEST_SET, output_file=\"submission.csv\"):\n    \"\"\"\n    Generate submission file using the trained model.\n    \n    Parameters:\n    - test_set (pd.DataFrame or pl.DataFrame): Preprocessed test set.\n    - model (tf.keras.Model): Trained Keras model.\n    - CATS (list): List of categorical column names.\n    - NUMS (list): List of numerical column names.\n    - TEST_SET (str): Path to the original test CSV to extract 'id'.\n    - output_file (str): Path to save the submission CSV.\n    \"\"\"\n    # Convert to polars DataFrame if it's a pandas DataFrame\n    if isinstance(test_set, pd.DataFrame):\n        test_set = pl.from_pandas(test_set)\n    \n    # Extract 'id' column from the original test CSV\n    test_original = pl.read_csv(TEST_SET)\n    if 'id' in test_original.columns:\n        ids = test_original['id'].to_numpy()\n    else:\n        print(\"Warning: 'id' column not found. Using row indices as 'id'.\")\n        ids = np.arange(len(test_set))\n    \n    # Split test_set into categorical and numerical\n    test_cats = test_set.select(CATS).to_pandas().values\n    test_nums = test_set.select(NUMS).to_pandas().values\n    \n    # Predict on the entire test set\n    predictions = model.predict([test_cats, test_nums], batch_size=512).flatten()\n    \n    # Create submission DataFrame with 'id' and 'price'\n    submission = pd.DataFrame({\n        'id': ids,\n        'price': predictions\n    })\n    \n    # Write to CSV\n    submission.to_csv(output_file, index=False)\n    print(f\"Submission file saved as {output_file}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:11:20.103991Z","iopub.execute_input":"2024-09-14T08:11:20.104701Z","iopub.status.idle":"2024-09-14T08:11:20.113489Z","shell.execute_reply.started":"2024-09-14T08:11:20.104655Z","shell.execute_reply":"2024-09-14T08:11:20.112607Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Assuming 'model' is your trained Keras model and 'CATS' & 'NUMS' are defined\ncreate_submission(\n    test_set=test_data,\n    model=model,\n    CATS=CATS,\n    NUMS=NUMS,\n    TEST_SET=TEST_SET,  # Path to your original test CSV\n    output_file=\"submission.csv\"\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:11:36.799542Z","iopub.execute_input":"2024-09-14T08:11:36.800407Z","iopub.status.idle":"2024-09-14T08:11:38.164816Z","shell.execute_reply.started":"2024-09-14T08:11:36.800350Z","shell.execute_reply":"2024-09-14T08:11:38.163860Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"\u001b[1m246/246\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step\nSubmission file saved as submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# plotter = Plotter(X, y)\n# plotter.plot_feature_importance(model)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.887458Z","iopub.status.idle":"2024-09-14T08:09:48.887788Z","shell.execute_reply.started":"2024-09-14T08:09:48.887619Z","shell.execute_reply":"2024-09-14T08:09:48.887636Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### imports","metadata":{}},{"cell_type":"code","source":"# import data_preprocessing\n# import plots\n# import importlib\n# importlib.reload(data_preprocessing)\n# importlib.reload(plots)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.889035Z","iopub.status.idle":"2024-09-14T08:09:48.889417Z","shell.execute_reply.started":"2024-09-14T08:09:48.889239Z","shell.execute_reply":"2024-09-14T08:09:48.889258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %%writefile data_preprocessing.py\n\n# import os\n# import re\n# import polars as pl\n# import pandas as pd\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# from sklearn.preprocessing import LabelEncoder, StandardScaler\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.model_selection import train_test_split\n# from sklearn.inspection import permutation_importance\n# import shap\n# import warnings\n\n# # Ignore all warnings\n# warnings.filterwarnings('ignore')\n\n\n# class DataPreprocessor:\n#     def __init__(self, train_file, test_file=None):\n#         self.train_file = train_file\n#         self.test_file = test_file\n#         self.data = None\n#         self.label_encoders = {}\n#         self.scaler = StandardScaler()\n\n#     def load_data(self):\n#         self.data = pl.read_csv(self.train_file)\n#         print(\"Data loaded successfully.\")\n    \n#     def replace_null_values(self):\n#         types = self.data.unique(subset=[\"fuel_type\"], maintain_order=True)[\"fuel_type\"]\n#         pl_null = types[2]\n#         mapping = {'–': pl_null, \"not supported\": pl_null, pl_null: \"Unknown\"}\n#         self.data = self.data.with_columns(fuel_type=pl.col(\"fuel_type\").replace(mapping))\n#         self.data = self.data.with_columns(clean_title=pl.col(\"clean_title\").replace(mapping))\n#         self.data = self.data.with_columns(accident=pl.col(\"accident\").replace(mapping))\n#         self.data = self.data.with_columns(transmission=pl.col(\"transmission\").replace(mapping))\n#         self.data = self.data.with_columns(fuel_type=pl.col(\"fuel_type\").replace(pl_null, \"Unknown\"))\n#         print(\"Null values replaced.\")\n    \n#     def categorize_transmission(self, trans):\n#         if trans is None:\n#             return None\n#         trans = trans.lower()\n#         if \"manual\" in trans or \"m/t\" in trans:\n#             return \"Manual\"\n#         elif \"automatic\" in trans or \"a/t\" in trans or \"cvt\" in trans:\n#             return \"Automatic\"\n#         else:\n#             return \"Other\"\n    \n#     def extract_speed(self, trans):\n#         if trans is None:\n#             return \"Other\"\n#         match = re.search(r\"(\\d+)-speed\", trans, re.IGNORECASE)\n#         if match:\n#             return match.group(1)\n#         else:\n#             return \"Other\"\n    \n#     def categorize_transmissions(self):\n#         df_pandas = self.data.to_pandas()\n#         df_pandas[\"transmission_category\"] = df_pandas[\"transmission\"].apply(self.categorize_transmission)\n#         df_pandas[\"speed_category\"] = df_pandas[\"transmission\"].apply(self.extract_speed)\n#         self.data = pl.from_pandas(df_pandas)\n#         print(\"Transmissions categorized.\")\n    \n#     def extract_engine_details(self, engine_str):\n#         if pd.isnull(engine_str):\n#             return None, None, None\n#         hp_match = re.search(r\"(\\d{2,3}\\.?\\d*)HP\", engine_str)\n#         l_match = re.search(r\"(\\d\\.?\\d*)L\", engine_str)\n#         cyl_match = re.search(r\"(\\d+) Cylinder\", engine_str)\n#         hp = hp_match.group(1) if hp_match else None\n#         liters = l_match.group(1) if l_match else None\n#         cylinders = cyl_match.group(1) if cyl_match else None\n#         return hp, liters, cylinders\n\n#     def apply_engine_extraction(self):\n#         df_pandas = self.data.to_pandas()\n#         df_pandas['HP'], df_pandas['Liters'], df_pandas['Cylinders'] = zip(*df_pandas['engine'].apply(self.extract_engine_details))\n#         self.data = pl.from_pandas(df_pandas)\n#         self.data = self.data.drop(\"transmission\")\n#         self.data = self.data.drop(\"engine\")\n#         print(\"Engine details extracted.\")\n\n#     def label_encode(self):\n#         cat_data = self.data.select([col for col in self.data.columns if not self.data[col].dtype.is_numeric()])\n#         cat_data = cat_data.to_pandas()\n#         for column in cat_data.select_dtypes(include=['object']).columns:\n#             self.label_encoders[column] = LabelEncoder()\n#             cat_data[column] = self.label_encoders[column].fit_transform(cat_data[column])\n#         num_data = self.data.select([col for col in self.data.columns if self.data[col].dtype.is_numeric()])\n#         self.data = pl.from_pandas(pd.concat([num_data.to_pandas(), cat_data], axis=1))\n#         print(\"Categorical columns label encoded.\")\n\n#     def fill_nulls(self):\n#         df_pandas = self.data.to_pandas()\n#         df_pandas['speed_category'].fillna(0, inplace=True)\n#         df_pandas['HP'].fillna(0, inplace=True)\n#         df_pandas['Liters'].fillna(0, inplace=True)\n#         df_pandas['Cylinders'].fillna(0, inplace=True)\n#         self.data = pl.from_pandas(df_pandas)\n#         print(\"Null values filled.\")\n    \n#     def drop_columns(self, columns):\n#         self.data = self.data.drop(columns)\n#         print(f\"Dropped columns: {columns}\")\n\n#     def scale_features(self):\n#         df_pandas = self.data.to_pandas()\n#         numeric_columns = df_pandas.select_dtypes(include=['float64', 'int64']).columns\n#         df_pandas[numeric_columns] = self.scaler.fit_transform(df_pandas[numeric_columns])\n#         self.data = pl.from_pandas(df_pandas)\n#         print(\"Features scaled.\")\n    \n#     def plot_feature_importance(self, target_column):\n#         X = self.data.drop(target_column).to_pandas()\n#         y = self.data[target_column].to_pandas()\n#         model = RandomForestRegressor(n_estimators=100, random_state=42)\n#         model.fit(X, y)\n#         feature_importances = model.feature_importances_\n#         importance_df = pd.DataFrame({\n#             'Feature': X.columns,\n#             'Importance': feature_importances\n#         }).sort_values(by='Importance', ascending=False)\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=importance_df, palette='coolwarm')\n#         plt.title(f\"Feature Importance with respect to '{target_column}'\")\n#         plt.tight_layout()\n#         plt.show()\n\n#     def preprocess(self):\n#         self.load_data()\n#         self.replace_null_values()\n#         self.categorize_transmissions()\n#         self.apply_engine_extraction()\n#         self.label_encode()\n#         self.fill_nulls()\n#         self.drop_columns([\"id\"])\n#         self.scale_features()\n#         print(\"Preprocessing complete.\")\n    \n#     def print_dataframe(self):\n#         # Display the dataframe\n#         return self.data","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-14T08:09:48.890427Z","iopub.status.idle":"2024-09-14T08:09:48.890781Z","shell.execute_reply.started":"2024-09-14T08:09:48.890601Z","shell.execute_reply":"2024-09-14T08:09:48.890619Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %%writefile plots.py\n\n\n# import os\n# import re\n# import polars as pl\n# import pandas as pd\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# from sklearn.preprocessing import LabelEncoder, StandardScaler\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.model_selection import train_test_split\n# from sklearn.inspection import permutation_importance\n# import shap\n# import warnings\n\n# # Ignore all warnings\n# warnings.filterwarnings('ignore')\n\n\n# class Plotter:\n#     def __init__(self, X, y):\n#         \"\"\"\n#         Initializes the Plotter with preprocessed and scaled features and target data.\n        \n#         Parameters:\n#         - X: Feature DataFrame (already scaled)\n#         - y: Target Series (already scaled)\n#         \"\"\"\n#         self.X = X\n#         self.y = y\n\n\n#     def plot_correlation_matrix(self):\n#         \"\"\"\n#         Plots the correlation matrix of the combined feature and target data.\n#         \"\"\"\n#         # Combine X and y into one DataFrame\n#         df_combined = pd.concat([self.X, self.y], axis=1)\n\n#         # Calculate the correlation matrix\n#         corr_matrix = df_combined.corr()\n\n#         # Plot the correlation matrix using a heatmap\n#         plt.figure(figsize=(10, 8))\n#         sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, xticklabels=corr_matrix.columns, yticklabels=corr_matrix.columns)\n#         plt.title(\"Correlation Matrix\", fontsize=16)\n#         plt.xticks(rotation=45, ha='right')  # Rotate the x-axis labels slightly for better readability\n#         plt.yticks(rotation=0)  # Keep y-axis labels horizontal\n#         plt.tight_layout()\n#         plt.show()\n        \n    \n#     def plot_feature_importance(self, model):\n#         \"\"\"\n#         Plots feature importance using the provided trained model.\n        \n#         Parameters:\n#         - model: A trained model (e.g., RandomForestRegressor) with a `feature_importances_` attribute.\n#         \"\"\"\n#         feature_importances = model.feature_importances_\n#         importance_df = pd.DataFrame({\n#             'Feature': self.X.columns,\n#             'Importance': feature_importances\n#         }).sort_values(by='Importance', ascending=False)\n\n#         # Plot Feature Importance\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=importance_df, palette='coolwarm')\n#         plt.title(\"Feature Importance\", fontsize=16)\n#         plt.tight_layout()\n#         plt.show()\n    \n#     def plot_permutation_importance(self, model, random_state=42, n_estimators=100, n_repeats=10):\n#         \"\"\"\n#         Plots permutation feature importance based on the preprocessed data (already scaled).\n        \n#         Parameters:\n#         - random_state: Random seed for reproducibility (default 42)\n#         - n_estimators: Number of trees in the RandomForestRegressor (default 100)\n#         - n_repeats: Number of times to shuffle the data during permutation importance (default 10)\n#         \"\"\"\n\n#         perm_importance = permutation_importance(model, self.X, self.y, n_repeats=n_repeats, random_state=random_state, scoring='neg_root_mean_squared_error')\n\n#         # Step 3: Create a DataFrame to store the results\n#         perm_importance_df = pd.DataFrame({\n#             'Feature': self.X.columns,  # Use X's original column names\n#             'Importance': perm_importance.importances_mean\n#         }).sort_values(by='Importance', ascending=False)\n\n#         # Step 4: Plot Permutation Feature Importance\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=perm_importance_df, palette='coolwarm')\n#         plt.title(\"Permutation Feature Importance (Scaled)\", fontsize=16)\n#         plt.tight_layout()\n#         plt.show()\n        \n        \n#     def plot_shap_summary(self, model):\n#         \"\"\"\n#         Plots a SHAP summary plot for the provided model.\n        \n#         Parameters:\n#         - model: A trained model (e.g., RandomForestRegressor)\n#         \"\"\"\n#         # Create SHAP explainer\n#         explainer = shap.TreeExplainer(model)\n\n#         # Calculate SHAP values for the feature set\n#         shap_values = explainer.shap_values(self.X)\n\n#         # Plot SHAP summary plot (global interpretation)\n#         shap.summary_plot(shap_values, self.X, feature_names=self.X.columns)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T08:09:48.892494Z","iopub.status.idle":"2024-09-14T08:09:48.892829Z","shell.execute_reply.started":"2024-09-14T08:09:48.892658Z","shell.execute_reply":"2024-09-14T08:09:48.892675Z"},"trusted":true},"execution_count":null,"outputs":[]}]}