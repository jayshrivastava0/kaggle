{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-14T07:36:45.212081Z","iopub.execute_input":"2024-09-14T07:36:45.212482Z","iopub.status.idle":"2024-09-14T07:36:45.686358Z","shell.execute_reply.started":"2024-09-14T07:36:45.212438Z","shell.execute_reply":"2024-09-14T07:36:45.685064Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport re\nimport polars as pl\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.inspection import permutation_importance\nimport shap\nimport warnings\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.svm import SVR\nimport xgboost as xgb\nimport lightgbm as lgb\n# Ignore all warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:45.688795Z","iopub.execute_input":"2024-09-14T07:36:45.689923Z","iopub.status.idle":"2024-09-14T07:36:55.844231Z","shell.execute_reply.started":"2024-09-14T07:36:45.689852Z","shell.execute_reply":"2024-09-14T07:36:55.842828Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"%%writefile data_preprocessing.py\n\nimport os\nimport re\nimport polars as pl\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nimport numpy as np\nimport warnings\n\n# Ignore all warnings\nwarnings.filterwarnings('ignore')\n\nclass DataPreprocessor:\n    def __init__(self, train_file, test_file=None, rare_threshold=40, additional_categorical=None):\n        \"\"\"\n        Initialize the DataPreprocessor.\n\n        Parameters:\n        - train_file (str): Path to the training CSV file.\n        - test_file (str, optional): Path to the testing CSV file.\n        - rare_threshold (int): Threshold below which categories are considered rare.\n        - additional_categorical (list, optional): List of additional categorical column names.\n        \"\"\"\n        self.train_file = train_file\n        self.test_file = test_file\n        self.train = None\n        self.test = None\n        self.label_encoders = {}\n        self.scaler = StandardScaler()\n        self.rare_threshold = rare_threshold\n        self.CAT_SIZE = []\n        self.CAT_EMB = []\n        self.RARE = []\n        self.CATS = []  # List of categorical columns to encode\n        self.NUMS = []  # List of numerical columns to scale\n        self.additional_categorical = additional_categorical if additional_categorical else []\n\n    def load_data(self):\n        self.train = pl.read_csv(self.train_file)\n        if self.test_file:\n            self.test = pl.read_csv(self.test_file)\n            print(\"Training and Testing data loaded successfully.\")\n        else:\n            print(\"Training data loaded successfully.\")\n    \n    def replace_null_values(self):\n        # Replace specific null representations with \"Unknown\"\n        for column in [\"fuel_type\", \"clean_title\", \"accident\", \"transmission\"]:\n            if column in self.train.columns:\n                unique_values = self.train.unique(subset=[column], maintain_order=True)[column]\n                pl_null = unique_values[2] if len(unique_values) > 2 else None  # Adjust index as needed\n                mapping = {'–': pl_null, \"not supported\": pl_null, pl_null: \"Unknown\"}\n                self.train = self.train.with_columns(pl.col(column).replace(mapping))\n                if self.test and column in self.test.columns:\n                    self.test = self.test.with_columns(pl.col(column).replace(mapping))\n                self.train = self.train.with_columns(pl.col(column).replace(pl_null, \"Unknown\"))\n                if self.test and column in self.test.columns:\n                    self.test = self.test.with_columns(pl.col(column).replace(pl_null, \"Unknown\"))\n        print(\"Null values replaced.\")\n\n    def categorize_transmission(self, trans):\n        if trans is None or pd.isnull(trans):\n            return \"Other\"\n        trans = trans.lower()\n        if \"manual\" in trans or \"m/t\" in trans:\n            return \"Manual\"\n        elif \"automatic\" in trans or \"a/t\" in trans or \"cvt\" in trans:\n            return \"Automatic\"\n        else:\n            return \"Other\"\n\n    def extract_speed(self, trans):\n        if trans is None or pd.isnull(trans):\n            return \"Other\"\n        match = re.search(r\"(\\d+)-speed\", trans, re.IGNORECASE)\n        if match:\n            return match.group(1)\n        else:\n            return \"Other\"\n\n    def categorize_transmissions(self):\n        # Apply categorization on training data\n        df_pandas = self.train.to_pandas()\n        df_pandas[\"transmission_category\"] = df_pandas[\"transmission\"].apply(self.categorize_transmission)\n        df_pandas[\"speed_category\"] = df_pandas[\"transmission\"].apply(self.extract_speed)\n        self.train = pl.from_pandas(df_pandas)\n\n        # Apply the same to testing data if available\n        if self.test:\n            df_test = self.test.to_pandas()\n            df_test[\"transmission_category\"] = df_test[\"transmission\"].apply(self.categorize_transmission)\n            df_test[\"speed_category\"] = df_test[\"transmission\"].apply(self.extract_speed)\n            self.test = pl.from_pandas(df_test)\n        print(\"Transmissions categorized.\")\n\n    def extract_engine_details(self, engine_str):\n        if pd.isnull(engine_str):\n            return 0.0, 0.0, 0\n        hp_match = re.search(r\"(\\d{2,3}\\.?\\d*)HP\", engine_str)\n        l_match = re.search(r\"(\\d\\.?\\d*)L\", engine_str)\n        cyl_match = re.search(r\"(\\d+) Cylinder\", engine_str)\n        hp = float(hp_match.group(1)) if hp_match else 0.0\n        liters = float(l_match.group(1)) if l_match else 0.0\n        cylinders = int(cyl_match.group(1)) if cyl_match else 0\n        return hp, liters, cylinders\n\n    def apply_engine_extraction(self):\n        # Apply extraction on training data\n        df_pandas = self.train.to_pandas()\n        engine_details = df_pandas['engine'].apply(self.extract_engine_details)\n        df_pandas['HP'], df_pandas['Liters'], df_pandas['Cylinders'] = zip(*engine_details)\n        self.train = pl.from_pandas(df_pandas)\n        self.train = self.train.drop([\"transmission\", \"engine\"])\n        \n        # Apply the same to testing data if available\n        if self.test:\n            df_test = self.test.to_pandas()\n            engine_details_test = df_test['engine'].apply(self.extract_engine_details)\n            df_test['HP'], df_test['Liters'], df_test['Cylinders'] = zip(*engine_details_test)\n            self.test = pl.from_pandas(df_test)\n            self.test = self.test.drop([\"transmission\", \"engine\"])\n        print(\"Engine details extracted.\")\n\n    def detect_categorical_columns(self):\n        \"\"\"\n        Automatically detect categorical columns based on data types and additional specifications.\n        \"\"\"\n        df_pandas = self.train.to_pandas()\n        # Detect categorical columns based on data types\n        categorical_columns = df_pandas.select_dtypes(include=['object', 'category', 'bool', 'string']).columns.tolist()\n        \n        # Include additional categorical columns provided by the user\n        for col in self.additional_categorical:\n            if col in df_pandas.columns and col not in categorical_columns:\n                categorical_columns.append(col)\n        \n        print(f\"Detected categorical columns: {categorical_columns}\")\n        return categorical_columns\n\n    def label_encode_and_handle_rare(self, cat_cols):\n        \"\"\"\n        Label encode categorical columns and handle rare categories.\n        Rare categories are replaced with 0.\n        \"\"\"\n        df_pandas = self.train.to_pandas()\n        if self.test:\n            df_test = self.test.to_pandas()\n        else:\n            df_test = None\n\n        for c in cat_cols:\n            print(f\"\\nProcessing categorical column: {c}\")\n            # Ensure the column is of a categorical type\n            if df_pandas[c].dtype not in ['object', 'category', 'bool', 'string', 'int64']:\n                print(f\"Skipping column {c} as it is not of a categorical type.\")\n                continue\n            # Factorize to get integer codes\n            df_pandas[c], uniques = pd.factorize(df_pandas[c], sort=True)\n            if df_test is not None:\n                # Apply the same factorization to test data\n                df_test[c] = pd.Categorical(df_test[c], categories=uniques).codes\n                df_test[c] = df_test[c].astype(int)\n            # Shift to ensure minimum label is 0\n            df_pandas[c] -= df_pandas[c].min()\n            if df_test is not None:\n                df_test[c] -= df_pandas[c].min()\n            # Get value counts\n            vc = df_pandas[c].value_counts()\n            # Identify rare categories\n            rare_categories = vc[vc < self.rare_threshold].index.values\n            self.RARE.append(rare_categories)\n            # Number of unique categories excluding rare\n            n_unique = df_pandas[c].nunique()\n            min_val = df_pandas[c].min()\n            max_val = df_pandas[c].max()\n            rare_count = len(rare_categories)\n            print(f'{c}: nunique={n_unique}, min={min_val}, max={max_val}, rare_ct={rare_count}')\n            # Update CAT_SIZE and CAT_EMB\n            # +1 for rare category\n            cat_size = max_val + 2  # Adding one more for rare\n            self.CAT_SIZE.append(cat_size)\n            self.CAT_EMB.append(int(np.ceil(np.sqrt(cat_size))))\n            # Increment labels by 1 to reserve 0 for rare\n            df_pandas[c] += 1\n            if df_test is not None:\n                df_test[c] += 1\n            # Replace rare categories with 0\n            rare_indices = rare_categories + 1  # Since labels have been incremented\n            df_pandas.loc[df_pandas[c].isin(rare_indices), c] = 0\n            if df_test is not None:\n                df_test.loc[df_test[c].isin(rare_indices), c] = 0\n            # Store LabelEncoder (if needed elsewhere)\n            le = LabelEncoder()\n            # Fit on non-rare categories\n            non_rare = df_pandas[df_pandas[c] != 0][c]\n            le.fit(non_rare)\n            self.label_encoders[c] = le\n            print(f\"Label encoding completed for column: {c}\")\n        \n        # Update the training and testing data\n        self.train = pl.from_pandas(df_pandas)\n        if self.test:\n            self.test = pl.from_pandas(df_test)\n        print(\"\\nLabel encoding and rare category handling complete.\")\n\n    def fill_nulls(self):\n        df_pandas = self.train.to_pandas()\n        numerical_cols = ['speed_category', 'HP', 'Liters', 'Cylinders']\n        for col in numerical_cols:\n            if col in df_pandas.columns:\n                df_pandas[col].fillna(0, inplace=True)\n                if self.test and col in self.test.columns:\n                    df_test = self.test.to_pandas()\n                    df_test[col].fillna(0, inplace=True)\n                    self.test = pl.from_pandas(df_test)\n        self.train = pl.from_pandas(df_pandas)\n        print(\"Null values filled.\")\n\n    def drop_columns(self, columns):\n        existing_columns_train = self.train.columns\n        columns_to_drop = [col for col in columns if col in existing_columns_train]\n        self.train = self.train.drop(columns_to_drop)\n        if self.test:\n            existing_columns_test = self.test.columns\n            columns_to_drop_test = [col for col in columns if col in existing_columns_test]\n            self.test = self.test.drop(columns_to_drop_test)\n        print(f\"Dropped columns: {columns_to_drop}\")\n\n    def detect_numerical_columns(self):\n        \"\"\"\n        Detect numerical columns that need to be scaled.\n        \"\"\"\n        df_pandas = self.train.to_pandas()\n        numerical_columns = df_pandas.select_dtypes(include=['float64', 'int64']).columns.tolist()\n        # Exclude categorical columns\n        numerical_columns = [col for col in numerical_columns if col not in self.CATS]\n        # Further exclude target variable if present\n        if 'price' in numerical_columns:\n            numerical_columns.remove('price')\n        self.NUMS = numerical_columns\n        print(f\"Detected numerical columns for scaling: {self.NUMS}\")\n        return self.NUMS\n\n    def scale_features(self):\n        df_pandas = self.train.to_pandas()\n        numerical_columns = self.NUMS\n        print(f\"Scaling numerical columns: {numerical_columns}\")\n        # Fit scaler on training data\n        df_pandas[numerical_columns] = self.scaler.fit_transform(df_pandas[numerical_columns])\n        self.train = pl.from_pandas(df_pandas)\n        \n        # Apply scaler to test data if available\n        if self.test:\n            df_test = self.test.to_pandas()\n            df_test[numerical_columns] = self.scaler.transform(df_test[numerical_columns])\n            self.test = pl.from_pandas(df_test)\n        print(\"Features scaled.\")\n\n    def preprocess(self):\n        self.load_data()\n        self.replace_null_values()\n        self.categorize_transmissions()\n        self.apply_engine_extraction()\n        # Automatically detect categorical columns\n        categorical_columns = self.detect_categorical_columns()\n        self.CATS = categorical_columns\n        self.label_encode_and_handle_rare(cat_cols=categorical_columns)\n        self.fill_nulls()\n        self.drop_columns([\"id\"])  # Ensure 'id' exists or handle if missing\n        self.detect_numerical_columns()\n        self.scale_features()\n        print(\"Preprocessing complete.\")\n\n    def get_embedding_info(self):\n        \"\"\"\n        Returns a dictionary with categorical columns as keys and a tuple of (CAT_SIZE, CAT_EMB)\n        \"\"\"\n        embedding_info = {}\n        for idx, c in enumerate(self.CATS):\n            embedding_info[c] = (self.CAT_SIZE[idx], self.CAT_EMB[idx])\n        return embedding_info\n\n    def print_dataframe(self, dataset='train'):\n        # Display the dataframe\n        if dataset == 'train':\n            return self.train\n        elif dataset == 'test' and self.test is not None:\n            return self.test\n        else:\n            print(f\"No dataset named '{dataset}' found.\")\n            return None\n\n# Example usage:\n# preprocessor = DataPreprocessor(\n#     train_file='train.csv',\n#     test_file='test.csv',\n#     rare_threshold=40,\n#     additional_categorical=['brand', 'model']  # Specify additional categorical columns here\n# )\n# preprocessor.preprocess()\n# processed_train = preprocessor.print_dataframe('train')\n# processed_test = preprocessor.print_dataframe('test')\n# embedding_info = preprocessor.get_embedding_info()\n# print(embedding_info)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.846141Z","iopub.execute_input":"2024-09-14T07:36:55.846926Z","iopub.status.idle":"2024-09-14T07:36:55.866883Z","shell.execute_reply.started":"2024-09-14T07:36:55.846879Z","shell.execute_reply":"2024-09-14T07:36:55.865535Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Overwriting data_preprocessing.py\n","output_type":"stream"}]},{"cell_type":"code","source":"# %%writefile plots.py\n\n\n# import os\n# import re\n# import polars as pl\n# import pandas as pd\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# from sklearn.preprocessing import LabelEncoder, StandardScaler\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.model_selection import train_test_split\n# from sklearn.inspection import permutation_importance\n# import shap\n# import warnings\n\n# # Ignore all warnings\n# warnings.filterwarnings('ignore')\n\n\n# class Plotter:\n#     def __init__(self, X, y):\n#         \"\"\"\n#         Initializes the Plotter with preprocessed and scaled features and target data.\n        \n#         Parameters:\n#         - X: Feature DataFrame (already scaled)\n#         - y: Target Series (already scaled)\n#         \"\"\"\n#         self.X = X\n#         self.y = y\n\n\n#     def plot_correlation_matrix(self):\n#         \"\"\"\n#         Plots the correlation matrix of the combined feature and target data.\n#         \"\"\"\n#         # Combine X and y into one DataFrame\n#         df_combined = pd.concat([self.X, self.y], axis=1)\n\n#         # Calculate the correlation matrix\n#         corr_matrix = df_combined.corr()\n\n#         # Plot the correlation matrix using a heatmap\n#         plt.figure(figsize=(10, 8))\n#         sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, xticklabels=corr_matrix.columns, yticklabels=corr_matrix.columns)\n#         plt.title(\"Correlation Matrix\", fontsize=16)\n#         plt.xticks(rotation=45, ha='right')  # Rotate the x-axis labels slightly for better readability\n#         plt.yticks(rotation=0)  # Keep y-axis labels horizontal\n#         plt.tight_layout()\n#         plt.show()\n        \n    \n#     def plot_feature_importance(self, model):\n#         \"\"\"\n#         Plots feature importance using the provided trained model.\n        \n#         Parameters:\n#         - model: A trained model (e.g., RandomForestRegressor) with a `feature_importances_` attribute.\n#         \"\"\"\n#         feature_importances = model.feature_importances_\n#         importance_df = pd.DataFrame({\n#             'Feature': self.X.columns,\n#             'Importance': feature_importances\n#         }).sort_values(by='Importance', ascending=False)\n\n#         # Plot Feature Importance\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=importance_df, palette='coolwarm')\n#         plt.title(\"Feature Importance\", fontsize=16)\n#         plt.tight_layout()\n#         plt.show()\n    \n#     def plot_permutation_importance(self, model, random_state=42, n_estimators=100, n_repeats=10):\n#         \"\"\"\n#         Plots permutation feature importance based on the preprocessed data (already scaled).\n        \n#         Parameters:\n#         - random_state: Random seed for reproducibility (default 42)\n#         - n_estimators: Number of trees in the RandomForestRegressor (default 100)\n#         - n_repeats: Number of times to shuffle the data during permutation importance (default 10)\n#         \"\"\"\n\n#         perm_importance = permutation_importance(model, self.X, self.y, n_repeats=n_repeats, random_state=random_state, scoring='neg_root_mean_squared_error')\n\n#         # Step 3: Create a DataFrame to store the results\n#         perm_importance_df = pd.DataFrame({\n#             'Feature': self.X.columns,  # Use X's original column names\n#             'Importance': perm_importance.importances_mean\n#         }).sort_values(by='Importance', ascending=False)\n\n#         # Step 4: Plot Permutation Feature Importance\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=perm_importance_df, palette='coolwarm')\n#         plt.title(\"Permutation Feature Importance (Scaled)\", fontsize=16)\n#         plt.tight_layout()\n#         plt.show()\n        \n        \n#     def plot_shap_summary(self, model):\n#         \"\"\"\n#         Plots a SHAP summary plot for the provided model.\n        \n#         Parameters:\n#         - model: A trained model (e.g., RandomForestRegressor)\n#         \"\"\"\n#         # Create SHAP explainer\n#         explainer = shap.TreeExplainer(model)\n\n#         # Calculate SHAP values for the feature set\n#         shap_values = explainer.shap_values(self.X)\n\n#         # Plot SHAP summary plot (global interpretation)\n#         shap.summary_plot(shap_values, self.X, feature_names=self.X.columns)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.870822Z","iopub.execute_input":"2024-09-14T07:36:55.871593Z","iopub.status.idle":"2024-09-14T07:36:55.884066Z","shell.execute_reply.started":"2024-09-14T07:36:55.871547Z","shell.execute_reply":"2024-09-14T07:36:55.882860Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import data_preprocessing\nimport plots\nimport importlib\nimportlib.reload(data_preprocessing)\nimportlib.reload(plots)\nfrom data_preprocessing import DataPreprocessor\nfrom plots import Plotter","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.885379Z","iopub.execute_input":"2024-09-14T07:36:55.885736Z","iopub.status.idle":"2024-09-14T07:36:55.908976Z","shell.execute_reply.started":"2024-09-14T07:36:55.885700Z","shell.execute_reply":"2024-09-14T07:36:55.907787Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"DATAPATH = \"/kaggle/input/playground-series-s4e9/\"\nTRAIN_SET = DATAPATH + \"train.csv\"\nTEST_SET = DATAPATH + \"test.csv\"","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.910304Z","iopub.execute_input":"2024-09-14T07:36:55.910781Z","iopub.status.idle":"2024-09-14T07:36:55.916726Z","shell.execute_reply.started":"2024-09-14T07:36:55.910646Z","shell.execute_reply":"2024-09-14T07:36:55.915335Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# data = pl.read_csv(TRAIN_SET)\n# y = data[\"price\"]","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.918236Z","iopub.execute_input":"2024-09-14T07:36:55.918704Z","iopub.status.idle":"2024-09-14T07:36:55.930160Z","shell.execute_reply.started":"2024-09-14T07:36:55.918616Z","shell.execute_reply":"2024-09-14T07:36:55.928876Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# # Example usage\n# preprocessor = DataPreprocessor(TRAIN_SET)\n# preprocessor.preprocess()\n# X = preprocessor.train.drop(\"price\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.931674Z","iopub.execute_input":"2024-09-14T07:36:55.932044Z","iopub.status.idle":"2024-09-14T07:36:55.941951Z","shell.execute_reply.started":"2024-09-14T07:36:55.932006Z","shell.execute_reply":"2024-09-14T07:36:55.940406Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# preprocessor.print_dataframe()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.943588Z","iopub.execute_input":"2024-09-14T07:36:55.944125Z","iopub.status.idle":"2024-09-14T07:36:55.953883Z","shell.execute_reply.started":"2024-09-14T07:36:55.944063Z","shell.execute_reply":"2024-09-14T07:36:55.952591Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# from sklearn.model_selection import KFold\n# import tensorflow as tf\n# from tensorflow.keras.models import Model\n# from tensorflow.keras.layers import Dense, Dropout, Input, Embedding\n# from tensorflow.keras.layers import Concatenate, Multiply\n# import tensorflow.keras.backend as K\n\n# print('TF Version',tf.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.958444Z","iopub.execute_input":"2024-09-14T07:36:55.958882Z","iopub.status.idle":"2024-09-14T07:36:55.965249Z","shell.execute_reply.started":"2024-09-14T07:36:55.958839Z","shell.execute_reply":"2024-09-14T07:36:55.964101Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# EPOCHS = 3\n# LRS = [0.001]*2 + [0.0001]*1\n\n# def lrfn(epoch):\n#     return LRS[epoch]\n\n# rng = [i for i in range(EPOCHS)]\n# lr_y = [lrfn(x) for x in rng]\n# plt.figure(figsize=(10, 4))\n# plt.plot(rng, lr_y, '-o')\n# print(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\". \\\n#         format(lr_y[0], max(lr_y), lr_y[-1]))\n# plt.xlabel(\"Epoch\")\n# plt.ylabel(\"Learning Rate\")\n# plt.title(\"Learning Rate Schedule\")\n# plt.show()\n\n# lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose = True)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.966484Z","iopub.execute_input":"2024-09-14T07:36:55.966874Z","iopub.status.idle":"2024-09-14T07:36:55.977290Z","shell.execute_reply.started":"2024-09-14T07:36:55.966834Z","shell.execute_reply":"2024-09-14T07:36:55.976108Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\n\n# List all physical devices\ngpus = tf.config.list_physical_devices('GPU')\nif gpus:\n    print(f\"GPUs Available: {gpus}\")\nelse:\n    print(\"No GPUs found. Using CPU.\")\n\n    \n    \ngpus = tf.config.list_physical_devices('GPU')\nif gpus:\n    try:\n        # Enable memory growth for each GPU\n        for gpu in gpus:\n            tf.config.experimental.set_memory_growth(gpu, True)\n        logical_gpus = tf.config.list_logical_devices('GPU')\n        print(f\"{len(gpus)} Physical GPUs, {len(logical_gpus)} Logical GPUs\")\n    except RuntimeError as e:\n        # Memory growth must be set before GPUs have been initialized\n        print(e)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:36:55.979247Z","iopub.execute_input":"2024-09-14T07:36:55.979655Z","iopub.status.idle":"2024-09-14T07:37:11.187066Z","shell.execute_reply.started":"2024-09-14T07:36:55.979592Z","shell.execute_reply":"2024-09-14T07:37:11.185811Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"No GPUs found. Using CPU.\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Input, Embedding, Flatten, Concatenate\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# GPU Configuration\ngpus = tf.config.list_physical_devices('GPU')\nif gpus:\n    try:\n        # Enable memory growth\n        for gpu in gpus:\n            tf.config.experimental.set_memory_growth(gpu, True)\n        logical_gpus = tf.config.list_logical_devices('GPU')\n        print(f\"{len(gpus)} Physical GPUs, {len(logical_gpus)} Logical GPUs\")\n    except RuntimeError as e:\n        print(e)\nelse:\n    print(\"No GPUs found. Using CPU.\")\n\n# Import the DataPreprocessor class\nfrom data_preprocessing import DataPreprocessor\n\n# Define your version number for OOF predictions\nVER = 1\n\n# Initialize Preprocessor\npreprocessor = DataPreprocessor(\n    train_file=TRAIN_SET,  # Replace with your actual training file path\n    # test_file='test.csv',    # Replace with your actual testing file path\n    rare_threshold=40,\n    additional_categorical=['brand', 'model']  # Specify additional categorical columns here\n)\npreprocessor.preprocess()\n\n# Retrieve processed data\nprocessed_train = preprocessor.print_dataframe('train').to_pandas()\n# processed_test = preprocessor.print_dataframe('test').to_pandas()\nembedding_info = preprocessor.get_embedding_info()\nprint(\"Embedding Info:\", embedding_info)\n\n# Define categorical and numerical columns\nCATS = preprocessor.CATS\nNUMS = preprocessor.NUMS\n\n# Define target\nTARGET = 'price'\n\n# Split the data into training and validation sets (80:20)\nX = processed_train.drop(columns=[TARGET])\ny = processed_train[TARGET].values\n\nX_train_cats, X_valid_cats, X_train_nums, X_valid_nums, y_train, y_valid = train_test_split(\n    X[CATS].values,\n    X[NUMS].values,\n    y,\n    test_size=0.2,\n    random_state=42\n)\n\n# Learning Rate Schedule\nEPOCHS = 5\nLRS = [0.001] * 2 + [0.0001] * 2 + [0.00001] * 1\n\ndef lrfn(epoch):\n    return LRS[epoch] if epoch < len(LRS) else LRS[-1]\n\n# Plot Learning Rate Schedule\nrng = list(range(EPOCHS))\nlr_y = [lrfn(x) for x in rng]\nplt.figure(figsize=(10, 4))\nplt.plot(rng, lr_y, '-o')\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(lr_y[0], max(lr_y), lr_y[-1]))\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Learning Rate\")\nplt.title(\"Learning Rate Schedule\")\nplt.show()\n\nlr_callback = LearningRateScheduler(lrfn, verbose=True)\n\n# Build Keras Model\ndef build_model(embedding_info, numerical_input_size):\n    # CATEGORICAL FEATURES\n    x_input_cats = Input(shape=(len(CATS),), name='categorical_input')\n    embs = []\n    for j, cat in enumerate(CATS):\n        num_categories, embed_dim = embedding_info[cat]\n        e = Embedding(input_dim=num_categories, output_dim=embed_dim, name=f'embedding_{cat}')\n        x = e(x_input_cats[:, j])\n        x = Flatten()(x)\n        embs.append(x)\n    \n    # NUMERICAL FEATURES\n    x_input_nums = Input(shape=(numerical_input_size,), name='numerical_input')\n    \n    # COMBINE\n    x = Concatenate(axis=-1)(embs + [x_input_nums]) \n    x = Dense(256, activation='relu')(x)\n    x = Dense(256, activation='relu')(x)\n    x = Dense(256, activation='relu')(x)\n    output = Dense(1, activation='linear')(x)\n    \n    model = Model(inputs=[x_input_cats, x_input_nums], outputs=output)\n    \n    return model\n\n# Initialize Model\nmodel = build_model(embedding_info, numerical_input_size=len(NUMS))\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=lrfn(0)), \n    loss=\"mean_squared_error\", \n    metrics=[tf.keras.metrics.RootMeanSquaredError()]\n)\n\n# Display Model Summary\nmodel.summary()\n\n# Train the Model\nhistory = model.fit(\n    [X_train_cats, X_train_nums], y_train, \n    validation_data=([X_valid_cats, X_valid_nums], y_valid),\n    callbacks=[lr_callback],\n    batch_size=64, epochs=EPOCHS, verbose=2\n)\n\n# Plot Training and Validation RMSE\nplt.figure(figsize=(10, 6))\nplt.plot(history.history['root_mean_squared_error'], label='Train RMSE')\nplt.plot(history.history['val_root_mean_squared_error'], label='Validation RMSE')\nplt.xlabel('Epoch')\nplt.ylabel('RMSE')\nplt.title('Training and Validation RMSE')\nplt.legend()\nplt.show()\n\n# Predict on Validation Set\noof_preds = model.predict([X_valid_cats, X_valid_nums], batch_size=512).flatten()\n\n# Compute RMSE for Validation Set\nrmse = np.sqrt(np.mean((oof_preds - y_valid) ** 2))\nprint('Validation RMSE =', rmse)\n\n# Compute Overall CV RMSE (Here it's just the validation RMSE since we're not using K-Fold)\nrsme = rmse\nprint(\"Overall CV RMSE =\", rsme)\n\n# Save OOF Predictions\nif 'id' in processed_train.columns:\n    # Ensure that the indices match correctly\n    oof_df = processed_train.iloc[X_valid_cats[:,0].astype(int)].loc[:, ['id']].copy()\n    oof_df[\"pred\"] = oof_preds\n    oof_df.to_csv(f\"oof_v{VER}.csv\", index=False)\nelse:\n    oof_df = pd.DataFrame({'pred': oof_preds})\n    oof_df.to_csv(f\"oof_v{VER}.csv\", index=False)\n    print(\"Warning: 'id' column not found. OOF predictions saved without 'id'.\")\n\n# Predict on Test Set (Uncomment if using test data)\n# X_test_cats = processed_test[CATS].values\n# X_test_nums = processed_test[NUMS].values\n# test_preds = model.predict([X_test_cats, X_test_nums], batch_size=512).flatten()\n\n# Save Test Predictions (Uncomment if using test data)\n# processed_test['preds'] = test_preds\n# processed_test.to_csv('test_with_preds.csv', index=False)\n# print(\"Test predictions saved to 'test_with_preds.csv'\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:37:11.188855Z","iopub.execute_input":"2024-09-14T07:37:11.189611Z","iopub.status.idle":"2024-09-14T07:38:25.139611Z","shell.execute_reply.started":"2024-09-14T07:37:11.189563Z","shell.execute_reply":"2024-09-14T07:38:25.138095Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"No GPUs found. Using CPU.\nTraining data loaded successfully.\nNull values replaced.\nTransmissions categorized.\nEngine details extracted.\nDetected categorical columns: ['brand', 'model', 'fuel_type', 'ext_col', 'int_col', 'accident', 'clean_title', 'transmission_category', 'speed_category']\n\nProcessing categorical column: brand\nbrand: nunique=57, min=0, max=56, rare_ct=8\nLabel encoding completed for column: brand\n\nProcessing categorical column: model\nmodel: nunique=1897, min=0, max=1896, rare_ct=909\nLabel encoding completed for column: model\n\nProcessing categorical column: fuel_type\nfuel_type: nunique=6, min=0, max=5, rare_ct=0\nLabel encoding completed for column: fuel_type\n\nProcessing categorical column: ext_col\next_col: nunique=319, min=0, max=318, rare_ct=176\nLabel encoding completed for column: ext_col\n\nProcessing categorical column: int_col\nint_col: nunique=156, min=0, max=155, rare_ct=86\nLabel encoding completed for column: int_col\n\nProcessing categorical column: accident\naccident: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: accident\n\nProcessing categorical column: clean_title\nclean_title: nunique=2, min=0, max=1, rare_ct=0\nLabel encoding completed for column: clean_title\n\nProcessing categorical column: transmission_category\ntransmission_category: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: transmission_category\n\nProcessing categorical column: speed_category\nspeed_category: nunique=10, min=0, max=9, rare_ct=0\nLabel encoding completed for column: speed_category\n\nLabel encoding and rare category handling complete.\nNull values filled.\nDropped columns: ['id']\nDetected numerical columns for scaling: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nScaling numerical columns: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nFeatures scaled.\nPreprocessing complete.\nEmbedding Info: {'brand': (58, 8), 'model': (1898, 44), 'fuel_type': (7, 3), 'ext_col': (320, 18), 'int_col': (157, 13), 'accident': (4, 2), 'clean_title': (3, 2), 'transmission_category': (4, 2), 'speed_category': (11, 4)}\nLearning rate schedule: 0.001 to 0.001 to 1e-05\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"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oArjHjQAAIpwyy232AUwSapdu7btzxEREXbrIiIilJCQIElKTExUhw4dbOFMkm688UZZrVbt2bNHFotFx48fV69evYrtoX379rY/e3t7y8fHRykpKVe7SwCASoCABgBAEby9vQtdclhWPD09S1Tn6upq973FYpHVai2PlgAADoJ70AAAuAq//PJLoe9btWolSWrVqpW2bdum7Oxs2/r169fLyclJLVq0UM2aNdWwYUOtXr26QnsGADg+zqABAFCE3NxcJSUl2S1zcXGRv7+/JGnx4sXq3Lmzunfvro8//lgbNmzQO++8I0kaOnSopk6dquHDh2vatGk6efKkxo4dq/vuu0+BgYGSpGnTpumhhx5SQECAbr/9dmVlZWn9+vUaO3Zsxe4oAMChENAAAChCbGysgoOD7Za1aNFCu3fvlnRhhsVPP/1U//znPxUcHKz//ve/at26tSTJy8tLK1eu1Lhx49SlSxd5eXnp7rvv1quvvmp7r+HDhysnJ0ezZ8/WY489Jn9/f91zzz0Vt4MAAIfELI4AAJSSxWLRF198oejoaLNbAQBUMdyDBgAAAAAOgoAGAAAAAA6Ce9AAACgl7g4AAJQXzqABAAAAgIMgoAEAAACAgyCgAQAAAICDIKABAAAAgIMgoAEAAACAgyCgAQAAAICDIKABAAAAgIMgoAEAAACAg/h/RbsYx7+SPZoAAAAASUVORK5CYII="},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ categorical_input   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (\u001b[38;5;33mGetItem\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_1          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_2          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_3          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_4          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_5          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_6          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_7          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_8          │ (\u001b[38;5;45mNone\u001b[0m)            │          \u001b[38;5;34m0\u001b[0m │ categorical_inpu… │\n│ (\u001b[38;5;33mGetItem\u001b[0m)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_brand     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)         │        \u001b[38;5;34m464\u001b[0m │ get_item[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m44\u001b[0m)        │     \u001b[38;5;34m83,512\u001b[0m │ get_item_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_fuel_type │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │         \u001b[38;5;34m21\u001b[0m │ get_item_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_ext_col   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m)        │      \u001b[38;5;34m5,760\u001b[0m │ get_item_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_int_col   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m)        │      \u001b[38;5;34m2,041\u001b[0m │ get_item_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_accident  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m8\u001b[0m │ get_item_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_clean_ti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m6\u001b[0m │ get_item_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_transmis… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m8\u001b[0m │ get_item_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_speed_ca… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │         \u001b[38;5;34m44\u001b[0m │ get_item_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_brand[\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m44\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_fuel_t… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_3 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ embedding_ext_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_4 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ embedding_int_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_5 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_accide… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_6 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_clean_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_7 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_transm… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_8 (\u001b[38;5;33mFlatten\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ embedding_speed_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ numerical_input     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m101\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ flatten[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],    │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ flatten_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ flatten_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ numerical_input[\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │     \u001b[38;5;34m26,112\u001b[0m │ concatenate[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │     \u001b[38;5;34m65,792\u001b[0m │ dense[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │     \u001b[38;5;34m65,792\u001b[0m │ dense_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │        \u001b[38;5;34m257\u001b[0m │ dense_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ categorical_input   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_1          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_2          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_3          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_4          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_5          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_6          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_7          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item_8          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ categorical_inpu… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)           │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_brand     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">464</span> │ get_item[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">44</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">83,512</span> │ get_item_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_fuel_type │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">21</span> │ get_item_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_ext_col   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">5,760</span> │ get_item_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_int_col   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">2,041</span> │ get_item_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_accident  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │ get_item_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_clean_ti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span> │ get_item_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_transmis… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │ get_item_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_speed_ca… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">44</span> │ get_item_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_brand[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">44</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_fuel_t… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_ext_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_int_co… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_accide… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_clean_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_transm… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ flatten_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_speed_… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ numerical_input     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">101</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ flatten[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],    │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ flatten_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ flatten_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ numerical_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">26,112</span> │ concatenate[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">65,792</span> │ dense[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">65,792</span> │ dense_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">257</span> │ dense_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m249,817\u001b[0m (975.85 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">249,817</span> (975.85 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m249,817\u001b[0m (975.85 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">249,817</span> (975.85 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nEpoch 1: LearningRateScheduler setting learning rate to 0.001.\nEpoch 1/5\n2357/2357 - 16s - 7ms/step - loss: 5693568000.0000 - root_mean_squared_error: 75455.7344 - val_loss: 4660944384.0000 - val_root_mean_squared_error: 68271.1094 - learning_rate: 0.0010\n\nEpoch 2: LearningRateScheduler setting learning rate to 0.001.\nEpoch 2/5\n2357/2357 - 13s - 5ms/step - loss: 5477364224.0000 - root_mean_squared_error: 74009.2188 - val_loss: 4646290944.0000 - val_root_mean_squared_error: 68163.7031 - learning_rate: 0.0010\n\nEpoch 3: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 3/5\n2357/2357 - 12s - 5ms/step - loss: 5430010880.0000 - root_mean_squared_error: 73688.6094 - val_loss: 4636111360.0000 - val_root_mean_squared_error: 68088.9922 - learning_rate: 1.0000e-04\n\nEpoch 4: LearningRateScheduler setting learning rate to 0.0001.\nEpoch 4/5\n2357/2357 - 12s - 5ms/step - loss: 5421827584.0000 - root_mean_squared_error: 73633.0625 - val_loss: 4636281856.0000 - val_root_mean_squared_error: 68090.2500 - learning_rate: 1.0000e-04\n\nEpoch 5: LearningRateScheduler setting learning rate to 1e-05.\nEpoch 5/5\n2357/2357 - 12s - 5ms/step - loss: 5415426048.0000 - root_mean_squared_error: 73589.5781 - val_loss: 4633128960.0000 - val_root_mean_squared_error: 68067.0938 - learning_rate: 1.0000e-05\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step\nValidation RMSE = 68067.0976163496\nOverall CV RMSE = 68067.0976163496\nWarning: 'id' column not found. OOF predictions saved without 'id'.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Initialize Preprocessor for Test Data\npreprocessor_test = DataPreprocessor(\n    train_file=TEST_SET,\n    rare_threshold=40,\n    additional_categorical=['brand', 'model']\n)\npreprocessor_test.preprocess()\nprint(\"Test Data Preprocessing complete\")\ntest_data = preprocessor_test.train.to_pandas()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:43:27.386643Z","iopub.execute_input":"2024-09-14T07:43:27.387671Z","iopub.status.idle":"2024-09-14T07:43:31.062407Z","shell.execute_reply.started":"2024-09-14T07:43:27.387610Z","shell.execute_reply":"2024-09-14T07:43:31.061125Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Training data loaded successfully.\nNull values replaced.\nTransmissions categorized.\nEngine details extracted.\nDetected categorical columns: ['brand', 'model', 'fuel_type', 'ext_col', 'int_col', 'accident', 'clean_title', 'transmission_category', 'speed_category']\n\nProcessing categorical column: brand\nbrand: nunique=55, min=0, max=54, rare_ct=9\nLabel encoding completed for column: brand\n\nProcessing categorical column: model\nmodel: nunique=1891, min=0, max=1890, rare_ct=1140\nLabel encoding completed for column: model\n\nProcessing categorical column: fuel_type\nfuel_type: nunique=6, min=0, max=5, rare_ct=0\nLabel encoding completed for column: fuel_type\n\nProcessing categorical column: ext_col\next_col: nunique=317, min=0, max=316, rare_ct=211\nLabel encoding completed for column: ext_col\n\nProcessing categorical column: int_col\nint_col: nunique=156, min=0, max=155, rare_ct=110\nLabel encoding completed for column: int_col\n\nProcessing categorical column: accident\naccident: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: accident\n\nProcessing categorical column: clean_title\nclean_title: nunique=2, min=0, max=1, rare_ct=0\nLabel encoding completed for column: clean_title\n\nProcessing categorical column: transmission_category\ntransmission_category: nunique=3, min=0, max=2, rare_ct=0\nLabel encoding completed for column: transmission_category\n\nProcessing categorical column: speed_category\nspeed_category: nunique=10, min=0, max=9, rare_ct=0\nLabel encoding completed for column: speed_category\n\nLabel encoding and rare category handling complete.\nNull values filled.\nDropped columns: ['id']\nDetected numerical columns for scaling: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nScaling numerical columns: ['model_year', 'milage', 'HP', 'Liters', 'Cylinders']\nFeatures scaled.\nPreprocessing complete.\nTest Data Preprocessing complete\n","output_type":"stream"}]},{"cell_type":"code","source":"# # Initialize Preprocessor\n# preprocessor = DataPreprocessor(\n#     test_file=TEST_SET,  # Replace with your actual training file path\n#     # test_file='test.csv',    # Replace with your actual testing file path\n#     rare_threshold=40,\n#     additional_categorical=['brand', 'model']  # Specify additional categorical columns here\n# )\n# preprocessor.preprocess()\n\n# # Retrieve processed data\n# processed_train = preprocessor.print_dataframe('test').to_pandas(","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:45:22.276716Z","iopub.execute_input":"2024-09-14T07:45:22.277358Z","iopub.status.idle":"2024-09-14T07:45:22.284545Z","shell.execute_reply.started":"2024-09-14T07:45:22.277300Z","shell.execute_reply":"2024-09-14T07:45:22.283027Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport polars as pl\nimport numpy as np\n\ndef create_submission(test_set, model, CATS, NUMS, TEST_SET, output_file=\"submission.csv\"):\n    \"\"\"\n    Generate submission file using the trained model.\n    \n    Parameters:\n    - test_set (pd.DataFrame or pl.DataFrame): Preprocessed test set.\n    - model (tf.keras.Model): Trained Keras model.\n    - CATS (list): List of categorical column names.\n    - NUMS (list): List of numerical column names.\n    - TEST_SET (str): Path to the original test CSV to extract 'id'.\n    - output_file (str): Path to save the submission CSV.\n    \"\"\"\n    # Convert to polars DataFrame if it's a pandas DataFrame\n    if isinstance(test_set, pd.DataFrame):\n        test_set = pl.from_pandas(test_set)\n    \n    # Extract 'id' column from the original test CSV\n    test_original = pl.read_csv(TEST_SET)\n    if 'id' in test_original.columns:\n        ids = test_original['id'].to_numpy()\n    else:\n        print(\"Warning: 'id' column not found. Using row indices as 'id'.\")\n        ids = np.arange(len(test_set))\n    \n    # Split test_set into categorical and numerical\n    test_cats = test_set.select(CATS).to_pandas().values\n    test_nums = test_set.select(NUMS).to_pandas().values\n    \n    # Predict on the entire test set\n    predictions = model.predict([test_cats, test_nums], batch_size=512).flatten()\n    \n    # Create submission DataFrame with 'id' and 'price'\n    submission = pd.DataFrame({\n        'id': ids,\n        'price': predictions\n    })\n    \n    # Write to CSV\n    submission.to_csv(output_file, index=False)\n    print(f\"Submission file saved as {output_file}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:48:08.051974Z","iopub.execute_input":"2024-09-14T07:48:08.052509Z","iopub.status.idle":"2024-09-14T07:48:08.063918Z","shell.execute_reply.started":"2024-09-14T07:48:08.052463Z","shell.execute_reply":"2024-09-14T07:48:08.062550Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# Assuming 'model' is your trained Keras model and 'CATS' & 'NUMS' are defined\ncreate_submission(\n    test_set=test_data,\n    model=model,\n    CATS=CATS,\n    NUMS=NUMS,\n    TEST_SET=TEST_SET,  # Path to your original test CSV\n    output_file=\"submission.csv\"\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:48:32.363513Z","iopub.execute_input":"2024-09-14T07:48:32.363993Z","iopub.status.idle":"2024-09-14T07:48:34.206386Z","shell.execute_reply.started":"2024-09-14T07:48:32.363953Z","shell.execute_reply":"2024-09-14T07:48:34.205170Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"\u001b[1m246/246\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\nSubmission file saved as submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.550473Z","iopub.status.idle":"2024-09-14T07:38:29.550934Z","shell.execute_reply.started":"2024-09-14T07:38:29.550708Z","shell.execute_reply":"2024-09-14T07:38:29.550731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Dictionary for RandomForestRegressor parameters\n# rf_params = {\n#     'n_estimators': 100,\n#     'criterion': 'squared_error',\n#     'max_depth': None,\n#     'min_samples_split': 2,\n#     'min_samples_leaf': 1,\n#     'min_weight_fraction_leaf': 0.0,\n#     'max_features': 'auto',\n#     'max_leaf_nodes': None,\n#     'bootstrap': True,\n#     'oob_score': False,\n#     'n_jobs': -1,\n#     'random_state': 42,\n#     'verbose': 0,\n#     'warm_start': False,\n#     'ccp_alpha': 0.0,\n#     'max_samples': None\n# }\n\n\n\n# # Dictionary for SVR parameters\n# svr_params = {\n#     'kernel': 'rbf',\n#     'degree': 3,\n#     'gamma': 'scale',\n#     'coef0': 0.0,\n#     'tol': 1e-3,\n#     'C': 1.0,\n#     'epsilon': 0.1,\n#     'shrinking': True,\n#     'cache_size': 200,\n#     'verbose': False,\n#     'max_iter': -1\n# }\n\n\n# xgb_model = xgb.XGBRegressor(\n#     objective='reg:squarederror',\n#     n_estimators=100,\n#     max_depth=6,\n#     learning_rate=0.1,\n#     subsample=0.8,\n#     colsample_bytree=0.8,\n#     random_state=42,\n#     tree_method='gpu_hist'  # Enable GPU\n# )\n\n# lgb_model = lgb.LGBMRegressor(\n#     boosting_type='gbdt',\n#     num_leaves=31,\n#     learning_rate=0.1,\n#     n_estimators=100,\n#     random_state=42,\n#     device='gpu'  # Enable GPU\n# )\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.552735Z","iopub.status.idle":"2024-09-14T07:38:29.553172Z","shell.execute_reply.started":"2024-09-14T07:38:29.552956Z","shell.execute_reply":"2024-09-14T07:38:29.552978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# models_dict = {}","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.555246Z","iopub.status.idle":"2024-09-14T07:38:29.555704Z","shell.execute_reply.started":"2024-09-14T07:38:29.555458Z","shell.execute_reply":"2024-09-14T07:38:29.555480Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Instantiate the RandomForestRegressor model using the parameters from the dictionary\n# rf_model = RandomForestRegressor(**rf_params)\n# rf_model.fit(X_train, y_train)\n# rf_predictions = rf_model.predict(X_test)\n# rf_mse = np.sqrt(mean_squared_error(y_test, rf_predictions))\n# models_dict[rf_mse] = rf_model\n# print(f\"RandomForest RMSE: {rf_mse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.556824Z","iopub.status.idle":"2024-09-14T07:38:29.557286Z","shell.execute_reply.started":"2024-09-14T07:38:29.557050Z","shell.execute_reply":"2024-09-14T07:38:29.557074Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Instantiate the SVR model using the parameters from the dictionary\n# svr_model = SVR(**svr_params)\n# svr_model.fit(X_train, y_train)\n# svr_predictions = svr_model.predict(X_test)\n# svr_mse = np.sqrt(mean_squared_error(y_test, svr_predictions))\n# models_dict[svr_mse] = svr_model\n# print(f\"SVR RMSE: {svr_mse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.559511Z","iopub.status.idle":"2024-09-14T07:38:29.560115Z","shell.execute_reply.started":"2024-09-14T07:38:29.559824Z","shell.execute_reply":"2024-09-14T07:38:29.559870Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# xgb_model.fit(X_train, y_train)\n# xgb_predictions = xgb_model.predict(X_test)\n# xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_predictions))\n# models_dict[xgb_rmse] = xgb_model  # Store the RMSE and model\n# print(f\"XGBoost RMSE: {xgb_rmse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.563981Z","iopub.status.idle":"2024-09-14T07:38:29.565072Z","shell.execute_reply.started":"2024-09-14T07:38:29.564387Z","shell.execute_reply":"2024-09-14T07:38:29.564419Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# lgb_model.fit(X_train, y_train)\n# lgb_predictions = lgb_model.predict(X_test)\n# lgb_rmse = np.sqrt(mean_squared_error(y_test, lgb_predictions))\n# models_dict[lgb_rmse] = lgb_model  # Store the RMSE and model\n# print(f\"LightGBM RMSE: {lgb_rmse}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.567297Z","iopub.status.idle":"2024-09-14T07:38:29.567797Z","shell.execute_reply.started":"2024-09-14T07:38:29.567517Z","shell.execute_reply":"2024-09-14T07:38:29.567538Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# preprocessor = DataPreprocessor(TEST_SET)\n# preprocessor.preprocess()\n# print(\"Test Data Preproccessing complete\")\n# test_data = preprocessor.test","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.569451Z","iopub.status.idle":"2024-09-14T07:38:29.569906Z","shell.execute_reply.started":"2024-09-14T07:38:29.569687Z","shell.execute_reply":"2024-09-14T07:38:29.569710Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# def create_submission(test_set, models_dict, TEST_SET = DATAPATH + \"test.csv\", output_file=\"submission.csv\"):\n    \n    \n#     best_rmse = min(models_dict.keys())  # Get the smallest RMSE\n#     model = models_dict[best_rmse]  # Get the corresponding model\n#     print(f\"Best RMSE: {best_rmse}\")\n#     # Assuming test_set is a polars DataFrame\n#     # If it's not, we can convert it from pandas to polars\n#     if isinstance(test_set, pd.DataFrame):\n#         test_set = pl.DataFrame(test_set)\n    \n#     # Extract the 'id' column\n#     ids = pl.read_csv(TEST_SET)[\"id\"]\n\n#     # Predict on the entire test set (assuming model.predict() works on a whole dataframe)\n#     predictions = model.predict(test_set.to_pandas())  # converting polars DataFrame to pandas for prediction\n\n#     # Create a new polars DataFrame with 'id' and 'price' (predictions)\n#     submission = pl.DataFrame({\n#         'id': ids,\n#         'price': predictions\n#     })\n\n#     # Write to CSV\n#     submission.write_csv(output_file)\n#     print(f\"Submission file saved as {output_file}\")\n\n\n# create_submission(test_data, models_dict)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.571740Z","iopub.status.idle":"2024-09-14T07:38:29.572222Z","shell.execute_reply.started":"2024-09-14T07:38:29.571981Z","shell.execute_reply":"2024-09-14T07:38:29.572005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plotter = Plotter(X, y)\n# plotter.plot_feature_importance(model)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.574410Z","iopub.status.idle":"2024-09-14T07:38:29.575017Z","shell.execute_reply.started":"2024-09-14T07:38:29.574708Z","shell.execute_reply":"2024-09-14T07:38:29.574739Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### imports","metadata":{}},{"cell_type":"code","source":"# import data_preprocessing\n# import plots\n# import importlib\n# importlib.reload(data_preprocessing)\n# importlib.reload(plots)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.576968Z","iopub.status.idle":"2024-09-14T07:38:29.577582Z","shell.execute_reply.started":"2024-09-14T07:38:29.577260Z","shell.execute_reply":"2024-09-14T07:38:29.577292Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %%writefile data_preprocessing.py\n\n# import os\n# import re\n# import polars as pl\n# import pandas as pd\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# from sklearn.preprocessing import LabelEncoder, StandardScaler\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.model_selection import train_test_split\n# from sklearn.inspection import permutation_importance\n# import shap\n# import warnings\n\n# # Ignore all warnings\n# warnings.filterwarnings('ignore')\n\n\n# class DataPreprocessor:\n#     def __init__(self, train_file, test_file=None):\n#         self.train_file = train_file\n#         self.test_file = test_file\n#         self.data = None\n#         self.label_encoders = {}\n#         self.scaler = StandardScaler()\n\n#     def load_data(self):\n#         self.data = pl.read_csv(self.train_file)\n#         print(\"Data loaded successfully.\")\n    \n#     def replace_null_values(self):\n#         types = self.data.unique(subset=[\"fuel_type\"], maintain_order=True)[\"fuel_type\"]\n#         pl_null = types[2]\n#         mapping = {'–': pl_null, \"not supported\": pl_null, pl_null: \"Unknown\"}\n#         self.data = self.data.with_columns(fuel_type=pl.col(\"fuel_type\").replace(mapping))\n#         self.data = self.data.with_columns(clean_title=pl.col(\"clean_title\").replace(mapping))\n#         self.data = self.data.with_columns(accident=pl.col(\"accident\").replace(mapping))\n#         self.data = self.data.with_columns(transmission=pl.col(\"transmission\").replace(mapping))\n#         self.data = self.data.with_columns(fuel_type=pl.col(\"fuel_type\").replace(pl_null, \"Unknown\"))\n#         print(\"Null values replaced.\")\n    \n#     def categorize_transmission(self, trans):\n#         if trans is None:\n#             return None\n#         trans = trans.lower()\n#         if \"manual\" in trans or \"m/t\" in trans:\n#             return \"Manual\"\n#         elif \"automatic\" in trans or \"a/t\" in trans or \"cvt\" in trans:\n#             return \"Automatic\"\n#         else:\n#             return \"Other\"\n    \n#     def extract_speed(self, trans):\n#         if trans is None:\n#             return \"Other\"\n#         match = re.search(r\"(\\d+)-speed\", trans, re.IGNORECASE)\n#         if match:\n#             return match.group(1)\n#         else:\n#             return \"Other\"\n    \n#     def categorize_transmissions(self):\n#         df_pandas = self.data.to_pandas()\n#         df_pandas[\"transmission_category\"] = df_pandas[\"transmission\"].apply(self.categorize_transmission)\n#         df_pandas[\"speed_category\"] = df_pandas[\"transmission\"].apply(self.extract_speed)\n#         self.data = pl.from_pandas(df_pandas)\n#         print(\"Transmissions categorized.\")\n    \n#     def extract_engine_details(self, engine_str):\n#         if pd.isnull(engine_str):\n#             return None, None, None\n#         hp_match = re.search(r\"(\\d{2,3}\\.?\\d*)HP\", engine_str)\n#         l_match = re.search(r\"(\\d\\.?\\d*)L\", engine_str)\n#         cyl_match = re.search(r\"(\\d+) Cylinder\", engine_str)\n#         hp = hp_match.group(1) if hp_match else None\n#         liters = l_match.group(1) if l_match else None\n#         cylinders = cyl_match.group(1) if cyl_match else None\n#         return hp, liters, cylinders\n\n#     def apply_engine_extraction(self):\n#         df_pandas = self.data.to_pandas()\n#         df_pandas['HP'], df_pandas['Liters'], df_pandas['Cylinders'] = zip(*df_pandas['engine'].apply(self.extract_engine_details))\n#         self.data = pl.from_pandas(df_pandas)\n#         self.data = self.data.drop(\"transmission\")\n#         self.data = self.data.drop(\"engine\")\n#         print(\"Engine details extracted.\")\n\n#     def label_encode(self):\n#         cat_data = self.data.select([col for col in self.data.columns if not self.data[col].dtype.is_numeric()])\n#         cat_data = cat_data.to_pandas()\n#         for column in cat_data.select_dtypes(include=['object']).columns:\n#             self.label_encoders[column] = LabelEncoder()\n#             cat_data[column] = self.label_encoders[column].fit_transform(cat_data[column])\n#         num_data = self.data.select([col for col in self.data.columns if self.data[col].dtype.is_numeric()])\n#         self.data = pl.from_pandas(pd.concat([num_data.to_pandas(), cat_data], axis=1))\n#         print(\"Categorical columns label encoded.\")\n\n#     def fill_nulls(self):\n#         df_pandas = self.data.to_pandas()\n#         df_pandas['speed_category'].fillna(0, inplace=True)\n#         df_pandas['HP'].fillna(0, inplace=True)\n#         df_pandas['Liters'].fillna(0, inplace=True)\n#         df_pandas['Cylinders'].fillna(0, inplace=True)\n#         self.data = pl.from_pandas(df_pandas)\n#         print(\"Null values filled.\")\n    \n#     def drop_columns(self, columns):\n#         self.data = self.data.drop(columns)\n#         print(f\"Dropped columns: {columns}\")\n\n#     def scale_features(self):\n#         df_pandas = self.data.to_pandas()\n#         numeric_columns = df_pandas.select_dtypes(include=['float64', 'int64']).columns\n#         df_pandas[numeric_columns] = self.scaler.fit_transform(df_pandas[numeric_columns])\n#         self.data = pl.from_pandas(df_pandas)\n#         print(\"Features scaled.\")\n    \n#     def plot_feature_importance(self, target_column):\n#         X = self.data.drop(target_column).to_pandas()\n#         y = self.data[target_column].to_pandas()\n#         model = RandomForestRegressor(n_estimators=100, random_state=42)\n#         model.fit(X, y)\n#         feature_importances = model.feature_importances_\n#         importance_df = pd.DataFrame({\n#             'Feature': X.columns,\n#             'Importance': feature_importances\n#         }).sort_values(by='Importance', ascending=False)\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=importance_df, palette='coolwarm')\n#         plt.title(f\"Feature Importance with respect to '{target_column}'\")\n#         plt.tight_layout()\n#         plt.show()\n\n#     def preprocess(self):\n#         self.load_data()\n#         self.replace_null_values()\n#         self.categorize_transmissions()\n#         self.apply_engine_extraction()\n#         self.label_encode()\n#         self.fill_nulls()\n#         self.drop_columns([\"id\"])\n#         self.scale_features()\n#         print(\"Preprocessing complete.\")\n    \n#     def print_dataframe(self):\n#         # Display the dataframe\n#         return self.data","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-14T07:38:29.580478Z","iopub.status.idle":"2024-09-14T07:38:29.581116Z","shell.execute_reply.started":"2024-09-14T07:38:29.580798Z","shell.execute_reply":"2024-09-14T07:38:29.580829Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %%writefile plots.py\n\n\n# import os\n# import re\n# import polars as pl\n# import pandas as pd\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# from sklearn.preprocessing import LabelEncoder, StandardScaler\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.model_selection import train_test_split\n# from sklearn.inspection import permutation_importance\n# import shap\n# import warnings\n\n# # Ignore all warnings\n# warnings.filterwarnings('ignore')\n\n\n# class Plotter:\n#     def __init__(self, X, y):\n#         \"\"\"\n#         Initializes the Plotter with preprocessed and scaled features and target data.\n        \n#         Parameters:\n#         - X: Feature DataFrame (already scaled)\n#         - y: Target Series (already scaled)\n#         \"\"\"\n#         self.X = X\n#         self.y = y\n\n\n#     def plot_correlation_matrix(self):\n#         \"\"\"\n#         Plots the correlation matrix of the combined feature and target data.\n#         \"\"\"\n#         # Combine X and y into one DataFrame\n#         df_combined = pd.concat([self.X, self.y], axis=1)\n\n#         # Calculate the correlation matrix\n#         corr_matrix = df_combined.corr()\n\n#         # Plot the correlation matrix using a heatmap\n#         plt.figure(figsize=(10, 8))\n#         sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, xticklabels=corr_matrix.columns, yticklabels=corr_matrix.columns)\n#         plt.title(\"Correlation Matrix\", fontsize=16)\n#         plt.xticks(rotation=45, ha='right')  # Rotate the x-axis labels slightly for better readability\n#         plt.yticks(rotation=0)  # Keep y-axis labels horizontal\n#         plt.tight_layout()\n#         plt.show()\n        \n    \n#     def plot_feature_importance(self, model):\n#         \"\"\"\n#         Plots feature importance using the provided trained model.\n        \n#         Parameters:\n#         - model: A trained model (e.g., RandomForestRegressor) with a `feature_importances_` attribute.\n#         \"\"\"\n#         feature_importances = model.feature_importances_\n#         importance_df = pd.DataFrame({\n#             'Feature': self.X.columns,\n#             'Importance': feature_importances\n#         }).sort_values(by='Importance', ascending=False)\n\n#         # Plot Feature Importance\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=importance_df, palette='coolwarm')\n#         plt.title(\"Feature Importance\", fontsize=16)\n#         plt.tight_layout()\n#         plt.show()\n    \n#     def plot_permutation_importance(self, model, random_state=42, n_estimators=100, n_repeats=10):\n#         \"\"\"\n#         Plots permutation feature importance based on the preprocessed data (already scaled).\n        \n#         Parameters:\n#         - random_state: Random seed for reproducibility (default 42)\n#         - n_estimators: Number of trees in the RandomForestRegressor (default 100)\n#         - n_repeats: Number of times to shuffle the data during permutation importance (default 10)\n#         \"\"\"\n\n#         perm_importance = permutation_importance(model, self.X, self.y, n_repeats=n_repeats, random_state=random_state, scoring='neg_root_mean_squared_error')\n\n#         # Step 3: Create a DataFrame to store the results\n#         perm_importance_df = pd.DataFrame({\n#             'Feature': self.X.columns,  # Use X's original column names\n#             'Importance': perm_importance.importances_mean\n#         }).sort_values(by='Importance', ascending=False)\n\n#         # Step 4: Plot Permutation Feature Importance\n#         plt.figure(figsize=(10, 6))\n#         sns.barplot(x='Importance', y='Feature', data=perm_importance_df, palette='coolwarm')\n#         plt.title(\"Permutation Feature Importance (Scaled)\", fontsize=16)\n#         plt.tight_layout()\n#         plt.show()\n        \n        \n#     def plot_shap_summary(self, model):\n#         \"\"\"\n#         Plots a SHAP summary plot for the provided model.\n        \n#         Parameters:\n#         - model: A trained model (e.g., RandomForestRegressor)\n#         \"\"\"\n#         # Create SHAP explainer\n#         explainer = shap.TreeExplainer(model)\n\n#         # Calculate SHAP values for the feature set\n#         shap_values = explainer.shap_values(self.X)\n\n#         # Plot SHAP summary plot (global interpretation)\n#         shap.summary_plot(shap_values, self.X, feature_names=self.X.columns)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-14T07:38:29.582581Z","iopub.status.idle":"2024-09-14T07:38:29.583207Z","shell.execute_reply.started":"2024-09-14T07:38:29.582889Z","shell.execute_reply":"2024-09-14T07:38:29.582920Z"},"trusted":true},"execution_count":null,"outputs":[]}]}